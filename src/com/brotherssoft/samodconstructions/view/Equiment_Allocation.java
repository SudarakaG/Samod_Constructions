/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.brotherssoft.samodconstructions.view;

import com.brotherssoft.samodconstructions.controller.M_EmployeeController;
import com.brotherssoft.samodconstructions.controller.M_EquipmentController;
import com.brotherssoft.samodconstructions.controller.M_MainStockController;
import com.brotherssoft.samodconstructions.controller.M_Project_PrimaryController;
import com.brotherssoft.samodconstructions.controller.R_AssetCategoryController;
import com.brotherssoft.samodconstructions.controller.T_SiteAllocationController;
import com.brotherssoft.samodconstructions.custom.IDGenerator;
import com.brotherssoft.samodconstructions.custom.Validation;
import com.brotherssoft.samodconstructions.model.M_Employee;
import com.brotherssoft.samodconstructions.model.M_Equipment;
import com.brotherssoft.samodconstructions.model.M_MainStock;
import com.brotherssoft.samodconstructions.model.M_Project_Primary;
import com.brotherssoft.samodconstructions.model.R_AssetCategory;
import com.brotherssoft.samodconstructions.model.T_SiteAllocation;
import com.brotherssoft.samodconstructions.serverconnector.ServerConnector;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akvasoft
 */
public class Equiment_Allocation extends javax.swing.JPanel {

    R_AssetCategoryController assetCategoryController;
    M_EquipmentController equipmentController;
    M_MainStockController mainStockController;
    T_SiteAllocationController siteAllocationController;
    M_EmployeeController employeeController;
    M_Project_PrimaryController projectController;

    DefaultTableModel dtmAllocatedEquipment;
    DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
    M_MainStock publicMainStock = null;
    T_SiteAllocation publicSiteStock = null;

    /**
     * Creates new form Equiment_Allocation
     */
    public Equiment_Allocation() throws Exception {
        initComponents();

        lbl_warnig1.setSize(471, 14);
        txt_available_stock.setSize(401, 26);
        lbl_allocated_site.setVisible(false);
        cmb_allocated_site.setVisible(false);
        lblStockInSite.setVisible(false);
        lblStockInSite2.setVisible(false);
        txt_available_stockInSite.setVisible(false);
        lblStockInMain2.setVisible(false);

        assetCategoryController = ServerConnector.getServerConnetor().getAssetCategoryController();
        equipmentController = ServerConnector.getServerConnetor().getEquipmentController();
        mainStockController = ServerConnector.getServerConnetor().getMainStockController();
        siteAllocationController = ServerConnector.getServerConnetor().getSiteAllocationController();
        employeeController = ServerConnector.getServerConnetor().getEmployeeController();
        projectController = ServerConnector.getServerConnetor().getPrimary_ProjectController();

        dtmAllocatedEquipment = (DefaultTableModel) tbl_equipmentStock_table.getModel();

        loadAssetCategoryCombo();
        laodEquipmentAllocationTable();
        loadToAddedEmployeeCombo();
        loadToApproveEmployeeCombo();
        loadToProjectCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Project_Primary_Info_Panel = new javax.swing.JPanel();
        user_panel_hedding2 = new javax.swing.JPanel();
        jLabel66 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jSeparator14 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tbl_equipmentStock_table = new javax.swing.JTable();
        txt_search_name_ = new javax.swing.JTextField();
        txt_Input_Panel_Branch4 = new javax.swing.JPanel();
        jLabel112 = new javax.swing.JLabel();
        cmb_stock_type = new javax.swing.JComboBox<>();
        btn_to_secondary_project = new javax.swing.JButton();
        btn_add_equipmentToMainStock = new javax.swing.JButton();
        jLabel104 = new javax.swing.JLabel();
        txt_quantity = new javax.swing.JTextField();
        jLabel133 = new javax.swing.JLabel();
        dp_updatedDate = new org.jdesktop.swingx.JXDatePicker();
        btn_new_EquipmentStock = new javax.swing.JButton();
        jLabel113 = new javax.swing.JLabel();
        cmb_asset_type = new javax.swing.JComboBox<>();
        jLabel114 = new javax.swing.JLabel();
        cmb_equipment_type = new javax.swing.JComboBox<>();
        jLabel115 = new javax.swing.JLabel();
        cmb_transaction_type = new javax.swing.JComboBox<>();
        jLabel105 = new javax.swing.JLabel();
        txt_available_stock = new javax.swing.JTextField();
        jLabel106 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        cmb_addedEmployee = new javax.swing.JComboBox<>();
        jLabel117 = new javax.swing.JLabel();
        cmb_approvedEmployee1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_sockDescription = new javax.swing.JTextArea();
        lbl_allocated_site = new javax.swing.JLabel();
        cmb_allocated_site = new javax.swing.JComboBox<>();
        lblStockInSite = new javax.swing.JLabel();
        txt_available_stockInSite = new javax.swing.JTextField();
        lblStockInSite2 = new javax.swing.JLabel();
        lblStockInMain2 = new javax.swing.JLabel();
        btn_check = new javax.swing.JButton();
        lbl_warnig1 = new javax.swing.JLabel();

        Project_Primary_Info_Panel.setBackground(new java.awt.Color(255, 255, 255));
        Project_Primary_Info_Panel.setPreferredSize(new java.awt.Dimension(1050, 710));

        user_panel_hedding2.setBackground(new java.awt.Color(122, 72, 222));

        jLabel66.setBackground(new java.awt.Color(255, 255, 255));
        jLabel66.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel66.setForeground(new java.awt.Color(204, 204, 255));
        jLabel66.setText("Administrations / System Management / Operations /");

        jLabel69.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(204, 204, 204));
        jLabel69.setText("Equipment Allocation");

        javax.swing.GroupLayout user_panel_hedding2Layout = new javax.swing.GroupLayout(user_panel_hedding2);
        user_panel_hedding2.setLayout(user_panel_hedding2Layout);
        user_panel_hedding2Layout.setHorizontalGroup(
            user_panel_hedding2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(user_panel_hedding2Layout.createSequentialGroup()
                .addGroup(user_panel_hedding2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(user_panel_hedding2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(user_panel_hedding2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel69)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        user_panel_hedding2Layout.setVerticalGroup(
            user_panel_hedding2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(user_panel_hedding2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(user_panel_hedding2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel69)
                    .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Current Primary Projects", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jScrollPane12.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tbl_equipmentStock_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Stock Type", "Equipment Name", "MStock Quantity", "Updated Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_equipmentStock_table.setGridColor(new java.awt.Color(255, 255, 255));
        tbl_equipmentStock_table.setOpaque(false);
        tbl_equipmentStock_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_equipmentStock_tableMouseClicked(evt);
            }
        });
        jScrollPane12.setViewportView(tbl_equipmentStock_table);
        if (tbl_equipmentStock_table.getColumnModel().getColumnCount() > 0) {
            tbl_equipmentStock_table.getColumnModel().getColumn(0).setMinWidth(50);
            tbl_equipmentStock_table.getColumnModel().getColumn(0).setPreferredWidth(50);
        }

        txt_search_name_.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txt_search_name_.setForeground(new java.awt.Color(102, 102, 102));
        txt_search_name_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_search_name_.setText("Search Allocation");
        txt_search_name_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_search_name_MouseClicked(evt);
            }
        });
        txt_search_name_.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_search_name_KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txt_search_name_, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(txt_search_name_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txt_Input_Panel_Branch4.setBackground(new java.awt.Color(255, 255, 255));
        txt_Input_Panel_Branch4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Equipment Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        jLabel112.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel112.setText("Stock Type");

        cmb_stock_type.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cmb_stock_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Main Stock", "Site Allocation" }));
        cmb_stock_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_stock_typeActionPerformed(evt);
            }
        });

        btn_to_secondary_project.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_to_secondary_project.setText("Back To Main");
        btn_to_secondary_project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_to_secondary_projectActionPerformed(evt);
            }
        });

        btn_add_equipmentToMainStock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_add_equipmentToMainStock.setText("Save");
        btn_add_equipmentToMainStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_equipmentToMainStockActionPerformed(evt);
            }
        });

        jLabel104.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel104.setText("Quantity");

        txt_quantity.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_quantityActionPerformed(evt);
            }
        });
        txt_quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_quantityKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_quantityKeyReleased(evt);
            }
        });

        jLabel133.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel133.setText("Date");

        dp_updatedDate.setEnabled(false);
        dp_updatedDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dp_updatedDateMouseClicked(evt);
            }
        });
        dp_updatedDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dp_updatedDateActionPerformed(evt);
            }
        });

        btn_new_EquipmentStock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_new_EquipmentStock.setText("New");
        btn_new_EquipmentStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_new_EquipmentStockActionPerformed(evt);
            }
        });

        jLabel113.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel113.setText("Asset Type");

        cmb_asset_type.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_asset_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Asset Type -" }));
        cmb_asset_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_asset_typeActionPerformed(evt);
            }
        });

        jLabel114.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel114.setText("Equipment");

        cmb_equipment_type.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_equipment_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Equipment Type -" }));
        cmb_equipment_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_equipment_typeActionPerformed(evt);
            }
        });

        jLabel115.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel115.setText("Transaction Type");

        cmb_transaction_type.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cmb_transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALLOCATE", "DEALLOCATE", "DISPOSE" }));
        cmb_transaction_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_transaction_typeActionPerformed(evt);
            }
        });

        jLabel105.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel105.setText("Available Stock");

        txt_available_stock.setEditable(false);
        txt_available_stock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_available_stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_available_stockActionPerformed(evt);
            }
        });

        jLabel106.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel106.setText("Comment");

        jLabel116.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel116.setText("Added By");

        cmb_addedEmployee.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_addedEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Empolyee Name -" }));
        cmb_addedEmployee.setEnabled(false);
        cmb_addedEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_addedEmployeeActionPerformed(evt);
            }
        });

        jLabel117.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel117.setText("Approved By");

        cmb_approvedEmployee1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_approvedEmployee1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Empolyee Name -" }));
        cmb_approvedEmployee1.setEnabled(false);
        cmb_approvedEmployee1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_approvedEmployee1ActionPerformed(evt);
            }
        });

        txt_sockDescription.setColumns(20);
        txt_sockDescription.setRows(5);
        txt_sockDescription.setEnabled(false);
        jScrollPane1.setViewportView(txt_sockDescription);

        lbl_allocated_site.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbl_allocated_site.setText("Allocated Site");

        cmb_allocated_site.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_allocated_site.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Allocated Site -" }));
        cmb_allocated_site.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_allocated_siteActionPerformed(evt);
            }
        });

        lblStockInSite.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lblStockInSite.setText("Available Stock");

        txt_available_stockInSite.setEditable(false);
        txt_available_stockInSite.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_available_stockInSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_available_stockInSiteActionPerformed(evt);
            }
        });

        lblStockInSite2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lblStockInSite2.setText("in Site");

        lblStockInMain2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lblStockInMain2.setText("in Main Stock");

        btn_check.setBackground(new java.awt.Color(255, 255, 0));
        btn_check.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_check.setText("Check");
        btn_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_checkActionPerformed(evt);
            }
        });

        lbl_warnig1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_warnig1.setForeground(new java.awt.Color(255, 0, 0));
        lbl_warnig1.setText(" * Please Check the Quantity Before Continue.. (By Pressing Enter or Click Check)");

        javax.swing.GroupLayout txt_Input_Panel_Branch4Layout = new javax.swing.GroupLayout(txt_Input_Panel_Branch4);
        txt_Input_Panel_Branch4.setLayout(txt_Input_Panel_Branch4Layout);
        txt_Input_Panel_Branch4Layout.setHorizontalGroup(
            txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                            .addComponent(jLabel112)
                            .addGap(51, 51, 51))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                            .addComponent(jLabel113, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                            .addComponent(jLabel114, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                            .addComponent(jLabel115)
                            .addGap(11, 11, 11))
                        .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                            .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel104, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel105, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel133, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel106, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(4, 4, 4)))
                    .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                        .addComponent(lbl_allocated_site)
                        .addGap(33, 33, 33)))
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmb_allocated_site, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                                    .addComponent(txt_available_stockInSite, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(91, 91, 91))
                                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                                        .addComponent(txt_available_stock)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblStockInMain2))
                                    .addComponent(lblStockInSite2)
                                    .addComponent(cmb_transaction_type, javax.swing.GroupLayout.Alignment.LEADING, 0, 350, Short.MAX_VALUE)
                                    .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                                        .addComponent(txt_quantity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_check)))))
                        .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                            .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cmb_addedEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmb_stock_type, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_equipment_type, javax.swing.GroupLayout.Alignment.LEADING, 0, 350, Short.MAX_VALUE)
                                    .addComponent(cmb_asset_type, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dp_updatedDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(cmb_approvedEmployee1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                                    .addComponent(btn_new_EquipmentStock, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_add_equipmentToMainStock, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_to_secondary_project)))
                            .addGap(0, 0, Short.MAX_VALUE)))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                .addComponent(jLabel117, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(361, 361, 361))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                .addComponent(jLabel116, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(371, 371, 371))
            .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStockInSite, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_warnig1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        txt_Input_Panel_Branch4Layout.setVerticalGroup(
            txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel112, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_stock_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_allocated_site, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_allocated_site, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel113, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_asset_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel114, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_equipment_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel115, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel104, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_quantity)
                    .addComponent(btn_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addComponent(lbl_warnig1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStockInSite, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_available_stockInSite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStockInSite2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel105, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_available_stock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStockInMain2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel133, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dp_updatedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel106, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel116, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_addedEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel117, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_approvedEmployee1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_add_equipmentToMainStock)
                    .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_to_secondary_project, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_new_EquipmentStock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        txt_Input_Panel_Branch4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dp_updatedDate, txt_available_stock});

        javax.swing.GroupLayout Project_Primary_Info_PanelLayout = new javax.swing.GroupLayout(Project_Primary_Info_Panel);
        Project_Primary_Info_Panel.setLayout(Project_Primary_Info_PanelLayout);
        Project_Primary_Info_PanelLayout.setHorizontalGroup(
            Project_Primary_Info_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Project_Primary_Info_PanelLayout.createSequentialGroup()
                .addGroup(Project_Primary_Info_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(user_panel_hedding2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Project_Primary_Info_PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txt_Input_Panel_Branch4, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Project_Primary_Info_PanelLayout.setVerticalGroup(
            Project_Primary_Info_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Project_Primary_Info_PanelLayout.createSequentialGroup()
                .addComponent(user_panel_hedding2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Project_Primary_Info_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_Input_Panel_Branch4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Project_Primary_Info_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Project_Primary_Info_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_stock_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_stock_typeActionPerformed
        clearAllocationFields();
        if (cmb_stock_type.getSelectedIndex() == 1) {
            lbl_warnig1.setSize(471, 14);
            lbl_allocated_site.setVisible(true);
            lblStockInSite.setVisible(true);
            lblStockInSite2.setVisible(true);
            txt_available_stock.setSize(310, 26);
            lblStockInMain2.setVisible(true);
            cmb_allocated_site.setVisible(true);
            txt_available_stockInSite.setVisible(true);
        } else {
            lbl_warnig1.setSize(471, 14);
            txt_available_stock.setSize(401, 26);
            lbl_allocated_site.setVisible(false);
            lblStockInSite.setVisible(false);
            lblStockInSite2.setVisible(false);
            lblStockInMain2.setVisible(false);
            cmb_allocated_site.setVisible(false);
            txt_available_stockInSite.setVisible(false);
        }
        if (cmb_equipment_type.getSelectedIndex() != 0 && cmb_stock_type.getSelectedIndex() == 1) {
            btn_add_equipmentToMainStock.setText("Save");
        } else {
            btn_add_equipmentToMainStock.setText("Update");
            if (cmb_stock_type.getSelectedIndex() == 1) {
                clearFields();
                loadSiteAllocationsToTable();
            } else {
                clearFields();
                laodEquipmentAllocationTable();
            }

        }
        disableAllocationFields();
    }//GEN-LAST:event_cmb_stock_typeActionPerformed

    private void btn_to_secondary_projectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_to_secondary_projectActionPerformed

    }//GEN-LAST:event_btn_to_secondary_projectActionPerformed

    private void btn_add_equipmentToMainStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_equipmentToMainStockActionPerformed
        if (btn_add_equipmentToMainStock.getText().equalsIgnoreCase("Save")) {
            saveEquipmentAllocation();
        } else {
            updateEquipmentAllocation();
        }

        clearFields();
    }//GEN-LAST:event_btn_add_equipmentToMainStockActionPerformed

    private void txt_quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_quantityActionPerformed
        mangeStockAmounts();
        enableAllocationFields();
    }//GEN-LAST:event_txt_quantityActionPerformed

    private void dp_updatedDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dp_updatedDateActionPerformed

    }//GEN-LAST:event_dp_updatedDateActionPerformed

    private void btn_new_EquipmentStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_new_EquipmentStockActionPerformed
        clearFields();
    }//GEN-LAST:event_btn_new_EquipmentStockActionPerformed

    private void tbl_equipmentStock_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_equipmentStock_tableMouseClicked
        if (dtmAllocatedEquipment.getValueAt(tbl_equipmentStock_table.getSelectedRow(), 0).toString().equalsIgnoreCase("Main Stock")) {
            loadFeildsFromMainStock(searchMainStockByTable());
        } else {
            loadFieldsFromSiteStock(searchSiteStockByTable());
        }
    }//GEN-LAST:event_tbl_equipmentStock_tableMouseClicked

    private void txt_search_name_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_search_name_MouseClicked

    }//GEN-LAST:event_txt_search_name_MouseClicked

    private void txt_search_name_KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_search_name_KeyReleased

    }//GEN-LAST:event_txt_search_name_KeyReleased

    private void cmb_asset_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_asset_typeActionPerformed
        clearAllocationFields();
        for (int i = 1; i < cmb_equipment_type.getItemCount(); i++) {
            cmb_equipment_type.removeItemAt(i);
        }
        if (cmb_asset_type.getSelectedIndex() != 0) {
            if (cmb_stock_type.getSelectedIndex() == 0) {
                loadEquipmentCombo();
            } else {
                loadMainStockToEquipment();
            }

        } else {
            cmb_equipment_type.setSelectedIndex(0);
        }
    }//GEN-LAST:event_cmb_asset_typeActionPerformed

    private void cmb_equipment_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_equipment_typeActionPerformed
        clearAllocationFields();
        txt_available_stockInSite.setText("");
        txt_available_stock.setText("");
        if (cmb_stock_type.getSelectedIndex() == 0) {
            loadDetailsToMainStockAllocation();
        } else {
            loadDetailsToSiteAllocation();
        }
        disableAllocationFields();
    }//GEN-LAST:event_cmb_equipment_typeActionPerformed

    private void cmb_transaction_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_transaction_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_transaction_typeActionPerformed

    private void txt_available_stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_available_stockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_available_stockActionPerformed

    private void cmb_addedEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_addedEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_addedEmployeeActionPerformed

    private void cmb_approvedEmployee1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_approvedEmployee1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_approvedEmployee1ActionPerformed

    private void cmb_allocated_siteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_allocated_siteActionPerformed
        clearAllocationFields();
//        cmb_asset_type.setSelectedIndex(0);
//        cmb_equipment_type.setSelectedIndex(0);
        if (cmb_allocated_site.getSelectedIndex() != 0) {
            loadDetailsToSiteAllocation();
        }
        disableAllocationFields();
    }//GEN-LAST:event_cmb_allocated_siteActionPerformed

    private void txt_available_stockInSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_available_stockInSiteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_available_stockInSiteActionPerformed

    private void txt_quantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_quantityKeyPressed
        Validation.priceText(txt_quantity);
    }//GEN-LAST:event_txt_quantityKeyPressed

    private void txt_quantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_quantityKeyReleased
        Validation.priceText(txt_quantity);
    }//GEN-LAST:event_txt_quantityKeyReleased

    private void dp_updatedDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dp_updatedDateMouseClicked

    }//GEN-LAST:event_dp_updatedDateMouseClicked

    private void btn_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_checkActionPerformed
        mangeStockAmounts();
        enableAllocationFields();
    }//GEN-LAST:event_btn_checkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Project_Primary_Info_Panel;
    private javax.swing.JButton btn_add_equipmentToMainStock;
    private javax.swing.JButton btn_check;
    private javax.swing.JButton btn_new_EquipmentStock;
    private javax.swing.JButton btn_to_secondary_project;
    private javax.swing.JComboBox<String> cmb_addedEmployee;
    private javax.swing.JComboBox<String> cmb_allocated_site;
    private javax.swing.JComboBox<String> cmb_approvedEmployee1;
    private javax.swing.JComboBox<String> cmb_asset_type;
    private javax.swing.JComboBox<String> cmb_equipment_type;
    private javax.swing.JComboBox<String> cmb_stock_type;
    private javax.swing.JComboBox<String> cmb_transaction_type;
    private org.jdesktop.swingx.JXDatePicker dp_updatedDate;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel133;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JLabel lblStockInMain2;
    private javax.swing.JLabel lblStockInSite;
    private javax.swing.JLabel lblStockInSite2;
    private javax.swing.JLabel lbl_allocated_site;
    private javax.swing.JLabel lbl_warnig1;
    private javax.swing.JTable tbl_equipmentStock_table;
    private javax.swing.JPanel txt_Input_Panel_Branch4;
    private javax.swing.JTextField txt_available_stock;
    private javax.swing.JTextField txt_available_stockInSite;
    private javax.swing.JTextField txt_quantity;
    private javax.swing.JTextField txt_search_name_;
    private javax.swing.JTextArea txt_sockDescription;
    private javax.swing.JPanel user_panel_hedding2;
    // End of variables declaration//GEN-END:variables

    private void loadAssetCategoryCombo() {
        cmb_asset_type.removeAll();
        try {
            List<R_AssetCategory> allAssetCategorys = assetCategoryController.getAllAssetCategorys();
            for (R_AssetCategory allAssetCategory : allAssetCategorys) {
                cmb_asset_type.addItem(allAssetCategory.getAssetCategory_description());
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadEquipmentCombo() {
        cmb_equipment_type.removeAll();
        try {
            for (int i = 1; i < cmb_equipment_type.getItemCount(); i++) {
                cmb_equipment_type.removeItemAt(i);
            }
            List<M_Equipment> allEquipments = equipmentController.getAllEquipments();
            int assetCategoryId = assetCategoryId = assetCategoryController.searchAssetCategory(cmb_asset_type.getSelectedItem().toString()).getAssetCategory_id();
            for (M_Equipment allEquipment : allEquipments) {
                if (allEquipment.getEquipment_asset_category_id() == assetCategoryId) {
                    cmb_equipment_type.addItem(allEquipment.getEquipment_name());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void laodEquipmentAllocationTable() {
        dtmAllocatedEquipment.setRowCount(0);
        try {
            List<M_MainStock> allMainStock = mainStockController.getAllLastAddedMainStock();
            for (M_MainStock m_MainStock : allMainStock) {

                    String[] rowData = {"Main Stock", equipmentController.searchEquipment(m_MainStock.getMainStock_equipment_id()).getEquipment_name(), Double.toString(m_MainStock.getMainStock_quantity()), m_MainStock.getMainStock_updateDate().toString()};
                    dtmAllocatedEquipment.addRow(rowData);
            
            }

        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveEquipmentAllocation() {
        try {

            String equipmentId = equipmentController.searchEquipmentByName(cmb_equipment_type.getSelectedItem().toString()).getEquipment_id();
            String trType = cmb_transaction_type.getSelectedItem().toString();
            Date updatedDate = dp_updatedDate.getDate();
            int addeBy = 0;
            if (cmb_addedEmployee.getSelectedIndex() != 0) {
                addeBy = Integer.parseInt(cmb_addedEmployee.getSelectedItem().toString().split(" : ")[0]);
            }
            double quantity = Double.parseDouble(txt_available_stock.getText().replaceAll(",", ""));
            int approvedBy = 0;
            if (cmb_approvedEmployee1.getSelectedIndex() != 0) {
                approvedBy = Integer.parseInt(cmb_approvedEmployee1.getSelectedItem().toString().split(" : ")[0]);
            }
            String comment = txt_sockDescription.getText();
            if (cmb_stock_type.getSelectedIndex() == 0) {
                int mainStockId = IDGenerator.getNewID("m_mstock", "MSTOCK_ID");
                M_MainStock mainStock = new M_MainStock(mainStockId, 0, equipmentId, "EQUIPMENT", updatedDate, addeBy, quantity, approvedBy, comment, trType);
                boolean addMainStock = mainStockController.addMainStock(mainStock);
                if (addMainStock) {
                    JOptionPane.showMessageDialog(this, "Equipment Allocated to Main Stock Successfully..");
                    laodEquipmentAllocationTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Equipment Allocating Failed.. Please Check Again..");
                }

            } else {
                int siteAllocationId = IDGenerator.getNewID("t_sitealloc", "SITEALLOC_ID");
                int siteId = projectController.searchPrimaryProjectByName(cmb_allocated_site.getSelectedItem().toString()).getProject_id();
                double quantityInSite = Double.parseDouble(txt_available_stockInSite.getText().replaceAll(",", ""));

                T_SiteAllocation siteAllocation = new T_SiteAllocation(siteAllocationId, siteId, updatedDate, "EQUIPMENT", equipmentId, quantityInSite, comment, trType, addeBy, approvedBy);
                boolean addSiteAllocation = siteAllocationController.addSiteAllocation(siteAllocation);
                if (addSiteAllocation) {
                    List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipmentId)) {
                            m_MainStock.setMainStock_quantity(quantity);
                            boolean updateMainStockQuantity = mainStockController.updateMainStock(m_MainStock);
                            if (updateMainStockQuantity) {
                                JOptionPane.showMessageDialog(this, "Equipment Allocated to the Site Successfully..");
                                loadSiteAllocationsToTable();
                            } else {
                                JOptionPane.showMessageDialog(this, "Equipment Quatity Updating in Main Stock Failed.. Please Check Again..");
                            }
                        }
                        break;
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Equipment Allocating Failed.. Please Check Again..");
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateEquipmentAllocation() {
        try {

            String equipmentId = equipmentController.searchEquipmentByName(cmb_equipment_type.getSelectedItem().toString()).getEquipment_id();
            String trType = cmb_transaction_type.getSelectedItem().toString();
            Date updatedDate = dp_updatedDate.getDate();
            int addeBy = 0;
            if (cmb_addedEmployee.getSelectedIndex() != 0) {
                addeBy = Integer.parseInt(cmb_addedEmployee.getSelectedItem().toString().split(" : ")[0]);
            }
            double quantity = Double.parseDouble(txt_available_stock.getText().replaceAll(",", ""));
            int approvedBy = 0;
            if (cmb_approvedEmployee1.getSelectedIndex() != 0) {
                approvedBy = Integer.parseInt(cmb_approvedEmployee1.getSelectedItem().toString().split(" : ")[0]);
            }
            String comment = txt_sockDescription.getText();

            if (cmb_stock_type.getSelectedIndex() == 0) {
                int mainStockId = publicMainStock.getMainStock_id();
                M_MainStock mainStock = new M_MainStock(mainStockId, 0, equipmentId, "EQUIPMENT", updatedDate, addeBy, quantity, approvedBy, comment, trType);
                boolean updateMainStock = mainStockController.updateMainStock(mainStock);
                if (updateMainStock) {
                    JOptionPane.showMessageDialog(this, "Equipment Details Updated in Main Stock Successfully..");
                    laodEquipmentAllocationTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Equipment Allocation Details Updating Failed.. Please Check Again..");
                }

            } else {
                int siteAllocationId = publicSiteStock.getSiteAllocation_id();
                int siteId = projectController.searchPrimaryProjectByName(cmb_allocated_site.getSelectedItem().toString()).getProject_id();
                double quantityInSite = Double.parseDouble(txt_available_stockInSite.getText().replaceAll(",", ""));
                T_SiteAllocation siteAllocation = new T_SiteAllocation(siteAllocationId, siteId, updatedDate, "EQUIPMENT", equipmentId, quantityInSite, comment, trType, addeBy, approvedBy);
                boolean updateSiteAllocation = siteAllocationController.updateSiteAllocation(siteAllocation);
                if (updateSiteAllocation) {
                    List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipmentId)) {
                            m_MainStock.setMainStock_quantity(quantity);
                            boolean updateMainStockQuantity = mainStockController.updateMainStock(m_MainStock);
                            if (updateMainStockQuantity) {
                                JOptionPane.showMessageDialog(this, "Equipment Details Updated in Site Stock Successfully..");
                                loadSiteAllocationsToTable();
                            } else {
                                JOptionPane.showMessageDialog(this, "Equipment Quatity Updating in Main Stock Failed.. Please Check Again..");
                            }
                        }
                        break;
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Equipment Allocation Details Updating Failed.. Please Check Again..");
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadToAddedEmployeeCombo() {
        cmb_addedEmployee.removeAll();
        try {
            List<M_Employee> allEmployees = employeeController.getAllEmployees();
            for (M_Employee allEmployee : allEmployees) {
                if (allEmployee.getEmp_jobType_id() == 1) {
                    cmb_addedEmployee.addItem(allEmployee.getEmp_id() + " : " + allEmployee.getEmp_firstName() + " " + allEmployee.getEmp_middleName() + " " + allEmployee.getEmp_surName() + " [Office Staff]");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadToApproveEmployeeCombo() {
        cmb_approvedEmployee1.removeAll();
        try {
            List<M_Employee> allEmployees = employeeController.getAllEmployees();
            for (M_Employee allEmployee : allEmployees) {
                if (allEmployee.getEmp_jobType_id() == 1) {
                    cmb_approvedEmployee1.addItem(allEmployee.getEmp_id() + " : " + allEmployee.getEmp_firstName() + " " + allEmployee.getEmp_middleName() + " " + allEmployee.getEmp_surName() + " [Office Staff]");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadFeildsFromMainStock(M_MainStock mainStock) {
        M_Equipment equipment = null;
        R_AssetCategory assetCategory = null;
        try {
            equipment = equipmentController.searchEquipment(mainStock.getMainStock_equipment_id());
            assetCategory = assetCategoryController.searchAssetCategory(equipment.getEquipment_asset_category_id());
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }

        cmb_stock_type.setSelectedIndex(0);
        cmb_asset_type.setSelectedItem(assetCategory.getAssetCategory_description());
        cmb_equipment_type.setSelectedItem(equipment.getEquipment_name());
        cmb_transaction_type.setSelectedItem(mainStock.getMainStock_TRType());
        txt_available_stock.setText(decimalFormat.format(mainStock.getMainStock_quantity()));
        dp_updatedDate.setDate(mainStock.getMainStock_updateDate());
        txt_sockDescription.setText(mainStock.getMainStock_description());
        if (mainStock.getMainStock_addeduser_id() != 0) {
            for (int i = 1; i < cmb_addedEmployee.getItemCount(); i++) {
                int addedempId = Integer.parseInt(cmb_addedEmployee.getItemAt(i).split(" : ")[0]);
                if (addedempId == mainStock.getMainStock_addeduser_id()) {
                    cmb_addedEmployee.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            cmb_addedEmployee.setSelectedIndex(0);
        }
        if (mainStock.getMainStock_approveduser_id() != 0) {
            for (int i = 1; i < cmb_approvedEmployee1.getItemCount(); i++) {
                int addedempId = Integer.parseInt(cmb_approvedEmployee1.getItemAt(i).split(" : ")[0]);
                if (addedempId == mainStock.getMainStock_approveduser_id()) {
                    cmb_approvedEmployee1.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            cmb_approvedEmployee1.setSelectedIndex(0);
        }
        btn_add_equipmentToMainStock.setText("Update");

    }

    private M_MainStock searchMainStockByTable() {
        int selectedRow = tbl_equipmentStock_table.getSelectedRow();
        String eqName = (String) dtmAllocatedEquipment.getValueAt(selectedRow, 1);
        M_MainStock mainStock = null;
        try {
            String equipmentId = equipmentController.searchEquipmentByName(eqName).getEquipment_id();
            List<M_MainStock> allMainStock = mainStockController.getAllLastAddedMainStock();
            for (M_MainStock m_MainStock : allMainStock) {
                if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipmentId)) {
                    mainStock = m_MainStock;
                    publicMainStock = m_MainStock;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
        return mainStock;
    }

    private void loadSiteAllocationsToTable() {
        dtmAllocatedEquipment.setRowCount(0);
        try {
            List<T_SiteAllocation> siteAllocations = siteAllocationController.getLastAddedSiteAllocations();
            System.out.println(">>>>>>>>>>>>"+siteAllocations.size());
            String siteAllocateDate = "";

            for (T_SiteAllocation siteAllocation : siteAllocations) {

                if (siteAllocation.getSiteAllocation_date() != null) {
                    siteAllocateDate = siteAllocation.getSiteAllocation_date().toString();
                }
                String[] rowData = {"Site Stock", equipmentController.searchEquipment(siteAllocation.getSiteAllocation_itemId()).getEquipment_name(), Double.toString(siteAllocation.getSiteAllocation_quantity()), siteAllocateDate};
                dtmAllocatedEquipment.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearFields() {
        //cmb_stock_type.setSelectedIndex(0);
        cmb_asset_type.setSelectedIndex(0);
        cmb_allocated_site.setSelectedIndex(0);
        cmb_equipment_type.setSelectedIndex(0);
        cmb_transaction_type.setSelectedIndex(0);
        txt_quantity.setText("");
        txt_available_stockInSite.setText("");
        txt_available_stock.setText("");
        dp_updatedDate.setDate(null);
        txt_sockDescription.setText("");
        cmb_addedEmployee.setSelectedIndex(0);
        cmb_approvedEmployee1.setSelectedIndex(0);
        disableAllocationFields();
        btn_add_equipmentToMainStock.setText("Save");
        lbl_warnig1.setVisible(true);
    }

    private void loadFieldsFromSiteStock(T_SiteAllocation siteAllocation) {
        M_Equipment equipment = null;
        R_AssetCategory assetCategory = null;
        try {
            equipment = equipmentController.searchEquipment(siteAllocation.getSiteAllocation_itemId());
            assetCategory = assetCategoryController.searchAssetCategory(equipment.getEquipment_asset_category_id());

            cmb_stock_type.setSelectedIndex(1);
            cmb_allocated_site.setSelectedItem(projectController.searchPrimaryProject(siteAllocation.getSiteAllocation_siteId()).getProject_primary_name());

            cmb_asset_type.setSelectedItem(assetCategory.getAssetCategory_description());
            cmb_equipment_type.setSelectedItem(equipment.getEquipment_name());
            cmb_transaction_type.setSelectedItem(siteAllocation.getSiteAllocation_TRType());
            txt_available_stockInSite.setText(decimalFormat.format(siteAllocation.getSiteAllocation_quantity()));
            List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
            for (M_MainStock m_MainStock : allLastAddedMainStock) {
                if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipment.getEquipment_id())) {
                    txt_available_stock.setText(decimalFormat.format(m_MainStock.getMainStock_quantity()));
                }
            }
            dp_updatedDate.setDate(siteAllocation.getSiteAllocation_date());
            txt_sockDescription.setText(siteAllocation.getSiteAllocation_comment());
            if (siteAllocation.getSiteAllocation_addedUser() != 0) {
                for (int i = 1; i < cmb_addedEmployee.getItemCount(); i++) {
                    int addedempId = Integer.parseInt(cmb_addedEmployee.getItemAt(i).split(" : ")[0]);
                    if (addedempId == siteAllocation.getSiteAllocation_addedUser()) {
                        cmb_addedEmployee.setSelectedIndex(i);
                        break;
                    }
                }
            } else {
                cmb_addedEmployee.setSelectedIndex(0);
            }
            if (siteAllocation.getSiteAllocation_authorizedUser() != 0) {
                for (int i = 1; i < cmb_approvedEmployee1.getItemCount(); i++) {
                    int addedempId = Integer.parseInt(cmb_approvedEmployee1.getItemAt(i).split(" : ")[0]);
                    if (addedempId == siteAllocation.getSiteAllocation_authorizedUser()) {
                        cmb_approvedEmployee1.setSelectedIndex(i);
                        break;
                    }
                }
            } else {
                cmb_approvedEmployee1.setSelectedIndex(0);
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
        btn_add_equipmentToMainStock.setText("Update");

    }

    private T_SiteAllocation searchSiteStockByTable() {
        int selectedRow = tbl_equipmentStock_table.getSelectedRow();
        String eqName = (String) dtmAllocatedEquipment.getValueAt(selectedRow, 1);
        T_SiteAllocation siteAllocation = null;
        try {
            String equipmentId = equipmentController.searchEquipmentByName(eqName).getEquipment_id();
            List<T_SiteAllocation> siteAllocations = siteAllocationController.getLastAddedSiteAllocations();
            for (T_SiteAllocation t_SiteAllocation : siteAllocations) {
                if (t_SiteAllocation.getSiteAllocation_itemId().equalsIgnoreCase(equipmentId)) {
                    siteAllocation = t_SiteAllocation;
                    publicSiteStock = t_SiteAllocation;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
        return siteAllocation;
    }

    private void loadDetailsToSiteAllocation() {
        try {
            if (cmb_equipment_type.getSelectedIndex() != 0) {
                int siteId = projectController.searchPrimaryProjectByName(cmb_allocated_site.getSelectedItem().toString()).getProject_id();

                String equipmentId = equipmentController.searchEquipmentByName(cmb_equipment_type.getSelectedItem().toString()).getEquipment_id();

                List<T_SiteAllocation> lastAddedSiteAllocations = siteAllocationController.getLastAddedSiteAllocations();
                List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();

                if (lastAddedSiteAllocations.size() != 0) {
                    for (T_SiteAllocation lastAddedSiteAllocation : lastAddedSiteAllocations) {
                        if (lastAddedSiteAllocation.getSiteAllocation_siteId() == siteId && lastAddedSiteAllocation.getSiteAllocation_itemId().equalsIgnoreCase(equipmentId)) {
                            txt_available_stockInSite.setText(decimalFormat.format(lastAddedSiteAllocation.getSiteAllocation_quantity()));
                            for (M_MainStock m_MainStock : allLastAddedMainStock) {
                                if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipmentId)) {
                                    txt_available_stock.setText(decimalFormat.format(m_MainStock.getMainStock_quantity()));
                                    break;
                                } else {
                                    txt_available_stock.setText(decimalFormat.format(0));
                                }
                            }
                            dp_updatedDate.setDate(null);
                            txt_sockDescription.setText("");
                            cmb_addedEmployee.setSelectedIndex(0);
                            cmb_approvedEmployee1.setSelectedIndex(0);
                            break;
                        } else {
                            for (M_MainStock m_MainStock : allLastAddedMainStock) {
                                if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipmentId)) {
                                    txt_available_stock.setText(decimalFormat.format(m_MainStock.getMainStock_quantity()));
                                    break;
                                } else {
                                    txt_available_stock.setText(decimalFormat.format(0));
                                }
                            }
                            txt_available_stockInSite.setText(decimalFormat.format(0));
                            dp_updatedDate.setDate(null);
                            txt_sockDescription.setText("");
                            cmb_addedEmployee.setSelectedIndex(0);
                            cmb_approvedEmployee1.setSelectedIndex(0);
                        }
                    }
                } else {
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipmentId)) {
                            txt_available_stock.setText(decimalFormat.format(m_MainStock.getMainStock_quantity()));
                            break;
                        } else {
                            txt_available_stock.setText(decimalFormat.format(0));
                        }
                    }
                    txt_available_stockInSite.setText(decimalFormat.format(0));
                    dp_updatedDate.setDate(null);
                    txt_sockDescription.setText("");
                    cmb_addedEmployee.setSelectedIndex(0);
                    cmb_approvedEmployee1.setSelectedIndex(0);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadToProjectCombo() {
        cmb_allocated_site.removeAll();
        try {
            List<M_Project_Primary> allPrimaryProjects = projectController.getAllPrimaryProjects();
            for (M_Project_Primary allPrimaryProject : allPrimaryProjects) {
                cmb_allocated_site.addItem(allPrimaryProject.getProject_primary_name());
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void mangeStockAmounts() {
        if (!"".equals(txt_quantity.getText())) {
            if (cmb_stock_type.getSelectedIndex() == 0) {
                if (!"".equals(txt_available_stock.getText())) {
                    double current = Double.parseDouble(txt_available_stock.getText().replaceAll(",", ""));
                    double qty = Double.parseDouble(txt_quantity.getText().replaceAll(",", ""));
                    if (cmb_transaction_type.getSelectedIndex() == 0) {
                        txt_available_stock.setText(Double.toString(current + qty));
                    } else {
                        if (cmb_transaction_type.getSelectedIndex() == 1) {
                            if (current >= qty) {
                                txt_available_stock.setText(Double.toString(current - qty));
                            } else {
                                JOptionPane.showMessageDialog(this, "Not Such Amount to Deallocate..");
                            }
                        } else {
                            txt_quantity.setEnabled(false);
                            txt_available_stock.setText(decimalFormat.format(0));
                            enableAllocationFields();
                        }
                    }
                } else {
                    txt_available_stock.setText(decimalFormat.format(Double.parseDouble(txt_quantity.getText())));
                }
            } else {
                double inMain = 0;
                double current = 0;
                double qty = 0;
                if (!"".equals(txt_available_stockInSite.getText())) {
                    inMain = Double.parseDouble(txt_available_stock.getText().replaceAll(",", ""));
                    current = Double.parseDouble(txt_available_stockInSite.getText().replaceAll(",", ""));
                    qty = Double.parseDouble(txt_quantity.getText().replaceAll(",", ""));
                }
                if (cmb_transaction_type.getSelectedIndex() == 0) {
                    if (inMain >= qty) {
                        txt_available_stockInSite.setText(decimalFormat.format(current + qty));
                        txt_available_stock.setText(decimalFormat.format(inMain - qty));
                    } else {
                        JOptionPane.showMessageDialog(this, "Not Enough Quantity in Main Stock to Allocate to the Site..");
                    }
                } else {
                    if (cmb_transaction_type.getSelectedIndex() == 1) {
                        if (current >= qty) {
                            txt_available_stockInSite.setText(Double.toString(current - qty));
                            txt_available_stock.setText(decimalFormat.format(inMain + qty));
                        } else {
                            JOptionPane.showMessageDialog(this, "Not Such Amount to Deallocate..");
                        }
                    } else {
                        txt_quantity.setEnabled(false);
                        txt_available_stock.setText(decimalFormat.format(0));
                        enableAllocationFields();
                    }
                }

            }
        } else {
            txt_available_stock.setText(decimalFormat.format(0));
        }
        lbl_warnig1.setVisible(false);
    }

    private void enableAllocationFields() {
        dp_updatedDate.setEnabled(true);
        txt_sockDescription.setEnabled(true);
        cmb_addedEmployee.setEnabled(true);
        cmb_approvedEmployee1.setEnabled(true);
        btn_check.setEnabled(false);
    }

    private void disableAllocationFields() {
        dp_updatedDate.setEnabled(false);
        txt_sockDescription.setEnabled(false);
        cmb_addedEmployee.setEnabled(false);
        cmb_approvedEmployee1.setEnabled(false);
        btn_check.setEnabled(true);        
    }

    private void loadDetailsToMainStockAllocation() {
        txt_available_stock.setText("");
        try {
            if (cmb_equipment_type.getSelectedIndex() != 0) {
                String equipmentId = equipmentController.searchEquipmentByName(cmb_equipment_type.getSelectedItem().toString()).getEquipment_id();
                List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                if (allLastAddedMainStock.size() != 0) {
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(equipmentId)) {
                            txt_available_stock.setText(decimalFormat.format(m_MainStock.getMainStock_quantity()));
                            dp_updatedDate.setDate(null);
                            txt_sockDescription.setText("");
                            cmb_addedEmployee.setSelectedIndex(0);
                            cmb_approvedEmployee1.setSelectedIndex(0);
                            break;
                        } else {
                            txt_available_stock.setText(decimalFormat.format(0));
                            dp_updatedDate.setDate(null);
                            txt_sockDescription.setText("");
                            cmb_addedEmployee.setSelectedIndex(0);
                            cmb_approvedEmployee1.setSelectedIndex(0);
                        }
                    }
                } else {
                    txt_available_stock.setText(decimalFormat.format(0));
                    dp_updatedDate.setDate(null);
                    txt_sockDescription.setText("");
                    cmb_addedEmployee.setSelectedIndex(0);
                    cmb_approvedEmployee1.setSelectedIndex(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadMainStockToEquipment() {
        cmb_equipment_type.removeAll();
        for (int i = 1; i < cmb_equipment_type.getItemCount(); i++) {
            cmb_equipment_type.removeItemAt(i);
        }
        if (cmb_asset_type.getSelectedIndex() != 0) {
            try {
                int assetCategoryId = assetCategoryController.searchAssetCategory(cmb_asset_type.getSelectedItem().toString()).getAssetCategory_id();
                List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                List<M_Equipment> allEquipments = equipmentController.getAllEquipments();

                for (M_Equipment allEquipment : allEquipments) {

                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (allEquipment.getEquipment_id().equalsIgnoreCase(m_MainStock.getMainStock_equipment_id()) && allEquipment.getEquipment_asset_category_id() == assetCategoryId) {
                            cmb_equipment_type.addItem(allEquipment.getEquipment_name());
                        }
                    }

                }
            } catch (Exception ex) {
                Logger.getLogger(Equiment_Allocation.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            cmb_equipment_type.removeAll();
        }
    }

    private void clearAllocationFields() {
        dp_updatedDate.setDate(null);
        txt_sockDescription.setText("");
        cmb_addedEmployee.setSelectedIndex(0);
        cmb_approvedEmployee1.setSelectedIndex(0);
    }
}
