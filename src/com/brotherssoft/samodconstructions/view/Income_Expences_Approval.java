/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.brotherssoft.samodconstructions.view;

import com.brotherssoft.samodconstructions.controller.M_EmployeeController;
import com.brotherssoft.samodconstructions.controller.M_Project_PrimaryController;
import com.brotherssoft.samodconstructions.controller.R_ExpenceSubTypeController;
import com.brotherssoft.samodconstructions.controller.R_ExpenceTypeController;
import com.brotherssoft.samodconstructions.controller.R_IncomeSubTypeController;
import com.brotherssoft.samodconstructions.controller.R_IncomeTypeControler;
import com.brotherssoft.samodconstructions.controller.R_PaymentModeController;
import com.brotherssoft.samodconstructions.controller.T_ExpencesController;
import com.brotherssoft.samodconstructions.controller.T_IncomeController;
import com.brotherssoft.samodconstructions.model.M_Employee;
import com.brotherssoft.samodconstructions.model.T_Expences;
import com.brotherssoft.samodconstructions.model.T_Income;
import com.brotherssoft.samodconstructions.serverconnector.ServerConnector;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akvasoft
 */
public class Income_Expences_Approval extends javax.swing.JPanel {

    M_EmployeeController employeeController;
    T_IncomeController incomeController;
    T_ExpencesController expencesController;
    R_ExpenceTypeController expenceTypeController;
    R_ExpenceSubTypeController expenceSubTypeController;
    R_PaymentModeController paymentModeController;
    R_IncomeTypeControler incomeTypeControler;
    R_IncomeSubTypeController incomeSubTypeController;
    M_Project_PrimaryController projectController;
    DefaultTableModel dtmPendingIE;
    DefaultTableModel dtmApproval;
    public static int empIdPub;

    /**
     * Creates new form Employee_Panel
     */
    public Income_Expences_Approval() throws Exception {
        initComponents();
        dp_accountDate.setFormats("yyyy-MM-dd", "yyyy/MM/dd");
        dp_accountDate.setFormats("yyyy-MM-dd", "yyyy/MM/dd");
        dp_accountDate.setFormats("yyyy-MM-dd", "yyyy/MM/dd");
        dp_accountDate.setFormats("yyyy-MM-dd", "yyyy/MM/dd");
        dp_accountDate.setFormats("yyyy-MM-dd", "yyyy/MM/dd");
        New_Expences_Panel.setVisible(false);
        Expences_View_Panel.setVisible(true);

        incomeController = ServerConnector.getServerConnetor().getIncomeController();
        expencesController = ServerConnector.getServerConnetor().getExpencesController();
        employeeController = ServerConnector.getServerConnetor().getEmployeeController();
        expenceTypeController = ServerConnector.getServerConnetor().getExpenceTypeController();
        expenceSubTypeController = ServerConnector.getServerConnetor().getExpenceSubTypeController();
        incomeTypeControler = ServerConnector.getServerConnetor().getIncomeTypeControler();
        incomeSubTypeController = ServerConnector.getServerConnetor().getIncomeSubTypeController();
        projectController = ServerConnector.getServerConnetor().getPrimary_ProjectController();
        paymentModeController = ServerConnector.getServerConnetor().getPaymentModeController();

        dtmPendingIE = (DefaultTableModel) tbl_pendingIncomeExpences.getModel();
        dtmApproval = (DefaultTableModel) tble_approval.getModel();

        loadPendinIEDetails();
        loadEmpCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        New_Expences_Panel = new javax.swing.JPanel();
        bank_panel_hedding3 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel35 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        txt_Input_Panel_Branch1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tble_approval = new org.jdesktop.swingx.JXTable();
        btn_transfer_approval = new javax.swing.JButton();
        cmb_approved_emp = new javax.swing.JComboBox<>();
        dp_approvedDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dp_accountDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        Expences_View_Panel = new javax.swing.JPanel();
        bank_panel_hedding5 = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        tbl_panel_Branch2 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tbl_pendingIncomeExpences = new javax.swing.JTable();
        dp_accountDateSearch = new org.jdesktop.swingx.JXDatePicker();

        New_Expences_Panel.setBackground(new java.awt.Color(255, 255, 255));
        New_Expences_Panel.setPreferredSize(new java.awt.Dimension(1050, 710));

        bank_panel_hedding3.setBackground(new java.awt.Color(122, 72, 222));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(204, 204, 204));
        jLabel28.setText("Income - Expence Approval");

        jLabel35.setBackground(new java.awt.Color(255, 255, 255));
        jLabel35.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(204, 204, 255));
        jLabel35.setText("Administrations / System Management / Accounting");

        javax.swing.GroupLayout bank_panel_hedding3Layout = new javax.swing.GroupLayout(bank_panel_hedding3);
        bank_panel_hedding3.setLayout(bank_panel_hedding3Layout);
        bank_panel_hedding3Layout.setHorizontalGroup(
            bank_panel_hedding3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bank_panel_hedding3Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator9))
            .addGroup(bank_panel_hedding3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 515, Short.MAX_VALUE))
        );
        bank_panel_hedding3Layout.setVerticalGroup(
            bank_panel_hedding3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bank_panel_hedding3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bank_panel_hedding3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setText("Approved List");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        txt_Input_Panel_Branch1.setBackground(new java.awt.Color(255, 255, 255));
        txt_Input_Panel_Branch1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pending Approvels", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        tble_approval.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Approve", "Type", "Project", "Transaction", "Sub Transaction", "Amount", "Desc", "Payment Mode", "Enterd Employee", "Referance No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tble_approval);

        btn_transfer_approval.setBackground(new java.awt.Color(51, 51, 255));
        btn_transfer_approval.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_transfer_approval.setForeground(new java.awt.Color(255, 255, 255));
        btn_transfer_approval.setText("Transfer");
        btn_transfer_approval.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_transfer_approval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_transfer_approvalActionPerformed(evt);
            }
        });

        cmb_approved_emp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Approved Employee -" }));
        cmb_approved_emp.setPreferredSize(new java.awt.Dimension(167, 25));
        cmb_approved_emp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_approved_empActionPerformed(evt);
            }
        });

        dp_approvedDate.setPreferredSize(new java.awt.Dimension(110, 25));
        dp_approvedDate.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                dp_approvedDateComponentAdded(evt);
            }
        });
        dp_approvedDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dp_approvedDateActionPerformed(evt);
            }
        });
        dp_approvedDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dp_approvedDatePropertyChange(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Approved Date");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Approved Employee");

        javax.swing.GroupLayout txt_Input_Panel_Branch1Layout = new javax.swing.GroupLayout(txt_Input_Panel_Branch1);
        txt_Input_Panel_Branch1.setLayout(txt_Input_Panel_Branch1Layout);
        txt_Input_Panel_Branch1Layout.setHorizontalGroup(
            txt_Input_Panel_Branch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txt_Input_Panel_Branch1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(txt_Input_Panel_Branch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(txt_Input_Panel_Branch1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_approved_emp, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dp_approvedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_transfer_approval)))
                .addContainerGap())
        );
        txt_Input_Panel_Branch1Layout.setVerticalGroup(
            txt_Input_Panel_Branch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txt_Input_Panel_Branch1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txt_Input_Panel_Branch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_transfer_approval, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_approved_emp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dp_approvedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        dp_accountDate.setEditable(false);
        dp_accountDate.setEnabled(false);
        dp_accountDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dp_accountDate.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                dp_accountDateComponentAdded(evt);
            }
        });
        dp_accountDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dp_accountDateActionPerformed(evt);
            }
        });
        dp_accountDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dp_accountDatePropertyChange(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("* Mark Approving Data by Ticking & Click Transfer. Other (Unmarked) Data will Send Back to Reconsideriation.");

        javax.swing.GroupLayout New_Expences_PanelLayout = new javax.swing.GroupLayout(New_Expences_Panel);
        New_Expences_Panel.setLayout(New_Expences_PanelLayout);
        New_Expences_PanelLayout.setHorizontalGroup(
            New_Expences_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(New_Expences_PanelLayout.createSequentialGroup()
                .addGroup(New_Expences_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bank_panel_hedding3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(New_Expences_PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(New_Expences_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_Input_Panel_Branch1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(New_Expences_PanelLayout.createSequentialGroup()
                                .addComponent(dp_accountDate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(8, 8, 8))
        );
        New_Expences_PanelLayout.setVerticalGroup(
            New_Expences_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(New_Expences_PanelLayout.createSequentialGroup()
                .addComponent(bank_panel_hedding3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(New_Expences_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(dp_accountDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_Input_Panel_Branch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Expences_View_Panel.setBackground(new java.awt.Color(255, 255, 255));
        Expences_View_Panel.setPreferredSize(new java.awt.Dimension(1050, 710));

        bank_panel_hedding5.setBackground(new java.awt.Color(122, 72, 222));

        jLabel60.setBackground(new java.awt.Color(255, 255, 255));
        jLabel60.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(204, 204, 255));
        jLabel60.setText("Administrations / System Management / Accounting");

        jLabel61.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(204, 204, 204));
        jLabel61.setText("Show All Incomes And Expences");

        javax.swing.GroupLayout bank_panel_hedding5Layout = new javax.swing.GroupLayout(bank_panel_hedding5);
        bank_panel_hedding5.setLayout(bank_panel_hedding5Layout);
        bank_panel_hedding5Layout.setHorizontalGroup(
            bank_panel_hedding5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bank_panel_hedding5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(460, Short.MAX_VALUE))
            .addGroup(bank_panel_hedding5Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel61)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator11))
        );
        bank_panel_hedding5Layout.setVerticalGroup(
            bank_panel_hedding5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bank_panel_hedding5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bank_panel_hedding5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel61)
                    .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        tbl_panel_Branch2.setBackground(new java.awt.Color(255, 255, 255));
        tbl_panel_Branch2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Currunt Inomes and Expences ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        tbl_pendingIncomeExpences.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbl_pendingIncomeExpences.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_pendingIncomeExpences.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tbl_pendingIncomeExpences.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_pendingIncomeExpencesMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tbl_pendingIncomeExpences);
        if (tbl_pendingIncomeExpences.getColumnModel().getColumnCount() > 0) {
            tbl_pendingIncomeExpences.getColumnModel().getColumn(1).setHeaderValue("Type");
        }

        dp_accountDateSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dp_accountDateSearch.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                dp_accountDateSearchComponentAdded(evt);
            }
        });
        dp_accountDateSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dp_accountDateSearchActionPerformed(evt);
            }
        });
        dp_accountDateSearch.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dp_accountDateSearchPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout tbl_panel_Branch2Layout = new javax.swing.GroupLayout(tbl_panel_Branch2);
        tbl_panel_Branch2.setLayout(tbl_panel_Branch2Layout);
        tbl_panel_Branch2Layout.setHorizontalGroup(
            tbl_panel_Branch2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1036, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tbl_panel_Branch2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dp_accountDateSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tbl_panel_Branch2Layout.setVerticalGroup(
            tbl_panel_Branch2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tbl_panel_Branch2Layout.createSequentialGroup()
                .addComponent(dp_accountDateSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout Expences_View_PanelLayout = new javax.swing.GroupLayout(Expences_View_Panel);
        Expences_View_Panel.setLayout(Expences_View_PanelLayout);
        Expences_View_PanelLayout.setHorizontalGroup(
            Expences_View_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bank_panel_hedding5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(Expences_View_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbl_panel_Branch2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Expences_View_PanelLayout.setVerticalGroup(
            Expences_View_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Expences_View_PanelLayout.createSequentialGroup()
                .addComponent(bank_panel_hedding5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(tbl_panel_Branch2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane1.setLayer(New_Expences_Panel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Expences_View_Panel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Expences_View_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 1058, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(New_Expences_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 1058, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Expences_View_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(New_Expences_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 713, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked

    }//GEN-LAST:event_jButton4MouseClicked

    private void tbl_pendingIncomeExpencesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_pendingIncomeExpencesMouseClicked
        clearFields();
        try {
            Date parse = new SimpleDateFormat("yyyy-MM-dd").parse(dtmPendingIE.getValueAt(tbl_pendingIncomeExpences.getSelectedRow(), 0).toString());
            dp_accountDate.setDate(parse);
        } catch (ParseException ex) {
            Logger.getLogger(Income_Expences_Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
        New_Expences_Panel.setVisible(true);
        Expences_View_Panel.setVisible(false);
    }//GEN-LAST:event_tbl_pendingIncomeExpencesMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        New_Expences_Panel.setVisible(false);
        Expences_View_Panel.setVisible(true);
        loadPendinIEDetails();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btn_transfer_approvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_transfer_approvalActionPerformed
        transferApproval();
    }//GEN-LAST:event_btn_transfer_approvalActionPerformed

    private void dp_accountDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dp_accountDateActionPerformed
        loadApprovalDetails();
    }//GEN-LAST:event_dp_accountDateActionPerformed

    private void dp_accountDateComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dp_accountDateComponentAdded
    }//GEN-LAST:event_dp_accountDateComponentAdded

    private void dp_accountDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dp_accountDatePropertyChange
        if (dp_accountDate.getDate() != null) {
            loadApprovalDetails();
            btn_transfer_approval.setEnabled(false);
        }

    }//GEN-LAST:event_dp_accountDatePropertyChange

    private void dp_approvedDateComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dp_approvedDateComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_dp_approvedDateComponentAdded

    private void dp_approvedDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dp_approvedDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dp_approvedDateActionPerformed

    private void dp_approvedDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dp_approvedDatePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dp_approvedDatePropertyChange

    private void cmb_approved_empActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_approved_empActionPerformed
        btn_transfer_approval.setEnabled(true);
    }//GEN-LAST:event_cmb_approved_empActionPerformed

    private void dp_accountDateSearchComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dp_accountDateSearchComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_dp_accountDateSearchComponentAdded

    private void dp_accountDateSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dp_accountDateSearchActionPerformed
        dtmPendingIE.setRowCount(0);
        try {
            List<Date> inDateList = new ArrayList<>();
            List<T_Income> allIncomes = incomeController.getAllIncomes();
            for (T_Income allIncome : allIncomes) {
                if (allIncome.getIncome_status().equalsIgnoreCase("REQUESTED") && allIncome.getIncome_date() == dp_accountDateSearch.getDate()) {
                    if (inDateList.size() != 0) {
                        for (int i = 0; i < inDateList.size(); i++) {
                            if (inDateList.get(i) == allIncome.getIncome_date()) {
                                inDateList.remove(i);
                            }
                        }
                        inDateList.add(allIncome.getIncome_date());
                    } else {
                        inDateList.add(allIncome.getIncome_date());
                    }
                }
            }

            List<T_Expences> allExpences = expencesController.getAllExpences();
            List<Date> exDateList = new ArrayList<>();
            for (T_Expences allExpence : allExpences) {
                if (allExpence.getExpence_status().equalsIgnoreCase("REQUESTED") && allExpence.getExpence_date() == dp_accountDateSearch.getDate()) {
                    if (exDateList.size() != 0) {
                        for (int i = 0; i < exDateList.size(); i++) {
                            if (exDateList.get(i) == allExpence.getExpence_date()) {
                                exDateList.remove(i);
                            }
                        }
                        exDateList.add(allExpence.getExpence_date());
                    } else {
                        exDateList.add(allExpence.getExpence_date());
                    }
                }
            }

            for (Date date : exDateList) {
                Object[] rowDataex = {date, "EXPENCE"};
                dtmPendingIE.addRow(rowDataex);
            }
            for (Date date : inDateList) {
                Object[] rowDataIn = {date, "INCOME"};
                dtmPendingIE.addRow(rowDataIn);
            }

        } catch (Exception ex) {
            Logger.getLogger(Income_Expences_Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dp_accountDateSearchActionPerformed

    private void dp_accountDateSearchPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dp_accountDateSearchPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dp_accountDateSearchPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Expences_View_Panel;
    private javax.swing.JPanel New_Expences_Panel;
    private javax.swing.JPanel bank_panel_hedding3;
    private javax.swing.JPanel bank_panel_hedding5;
    private javax.swing.JButton btn_transfer_approval;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmb_approved_emp;
    private org.jdesktop.swingx.JXDatePicker dp_accountDate;
    private org.jdesktop.swingx.JXDatePicker dp_accountDateSearch;
    private org.jdesktop.swingx.JXDatePicker dp_approvedDate;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JPanel tbl_panel_Branch2;
    private javax.swing.JTable tbl_pendingIncomeExpences;
    private org.jdesktop.swingx.JXTable tble_approval;
    private javax.swing.JPanel txt_Input_Panel_Branch1;
    // End of variables declaration//GEN-END:variables

    private void loadPendinIEDetails() {
        dtmPendingIE.setRowCount(0);
        try {
            List<Date> inDateList = new ArrayList<>();
            List<T_Income> allIncomes = incomeController.getAllIncomes();
            for (T_Income allIncome : allIncomes) {
                if (allIncome.getIncome_status().equalsIgnoreCase("REQUESTED")) {
                    if (inDateList.size() != 0) {
                        for (int i = 0; i < inDateList.size(); i++) {
                            if (inDateList.get(i) == allIncome.getIncome_date()) {
                                inDateList.remove(i);
                            }
                        }
                        inDateList.add(allIncome.getIncome_date());
                    } else {
                        inDateList.add(allIncome.getIncome_date());
                    }
                }
            }

            List<T_Expences> allExpences = expencesController.getAllExpences();
            List<Date> exDateList = new ArrayList<>();
            for (T_Expences allExpence : allExpences) {
                if (allExpence.getExpence_status().equalsIgnoreCase("REQUESTED")) {
                    if (exDateList.size() != 0) {
                        for (int i = 0; i < exDateList.size(); i++) {
                            if (exDateList.get(i) == allExpence.getExpence_date()) {
                                exDateList.remove(i);
                            }
                        }
                        exDateList.add(allExpence.getExpence_date());
                    } else {
                        exDateList.add(allExpence.getExpence_date());
                    }
                }
            }

            for (Date date : exDateList) {
                Object[] rowDataex = {date, "EXPENCE"};
                dtmPendingIE.addRow(rowDataex);
            }
            for (Date date : inDateList) {
                Object[] rowDataIn = {date, "INCOME"};
                dtmPendingIE.addRow(rowDataIn);
            }

        } catch (Exception ex) {
            Logger.getLogger(Income_Expences_Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadApprovalDetails() {
        dtmApproval.setRowCount(0);
        System.out.println("date eka wada...");

        try {
            String accDate = null;
            if (dp_accountDate.getDate() != null) {
                accDate = new SimpleDateFormat("yyyy-MM-dd").format(dp_accountDate.getDate());
            }

            System.out.println("DDDDD" + accDate);
            String expenceType = "";
            String exSubType = "";
            String inType = "";
            String inSubType = "";
            String payMode = "";
            String enteredEmp = "";
            String project = "";
            List<M_Employee> allLastAddedEmployees = employeeController.getAllLastAddedEmployees();
            List<T_Income> allIncomes = incomeController.getAllIncomes();
            for (T_Income allIncome : allIncomes) {
                System.out.println(">>>>>" + allIncome.getIncome_date());
                if (allIncome.getIncome_status().equalsIgnoreCase("REQUESTED") && allIncome.getIncome_date().toString().equalsIgnoreCase(accDate)) {
                    System.out.println("Income hari");
                    if (allIncome.getIncome_typeId() != 0) {
                        inType = incomeTypeControler.searchIncomeType(allIncome.getIncome_typeId()).getIncomeType_name();
                    } else {
                        inType = "";
                    }
                    if (allIncome.getIncome_subTypeId() != 0) {
                        inSubType = incomeSubTypeController.searchIncomeSubType(allIncome.getIncome_subTypeId()).getIncomeSubType_name();
                    } else {
                        inSubType = "";
                    }
                    if (allIncome.getIncome_paymentModeId() != 0) {
                        payMode = paymentModeController.searchPaymentMode(allIncome.getIncome_paymentModeId()).getPaymentMode_name();
                    } else {
                        payMode = "";
                    }
                    if (allIncome.getIncome_enteredUser() != 0) {
                        for (M_Employee allLastAddedEmployee : allLastAddedEmployees) {
                            if (allIncome.getIncome_enteredUser() == allLastAddedEmployee.getEmp_id()) {
                                enteredEmp = allLastAddedEmployee.getEmp_initials() + " " + allLastAddedEmployee.getEmp_firstName();
                                break;
                            }
                        }

                    } else {
                        enteredEmp = "";
                    }
                    if (allIncome.getIncome_siteId() != 0) {
                        project = projectController.searchPrimaryProject(allIncome.getIncome_siteId()).getProject_primary_name();
                    } else {
                        project = "";
                    }

                    Object[] rowData = {false, "INCOME", project, inType, inSubType, allIncome.getIncome_billAmount(), allIncome.getIncome_description(), payMode, enteredEmp, allIncome.getIncome_paymentVoucherNo()};
                    dtmApproval.addRow(rowData);
                }
            }
            List<T_Expences> allExpences = expencesController.getAllExpences();

            for (M_Employee allLastAddedEmployee : allLastAddedEmployees) {

            }

            for (T_Expences allExpence : allExpences) {
                if (allExpence.getExpence_status().equalsIgnoreCase("REQUESTED") && allExpence.getExpence_date().toString().equalsIgnoreCase(accDate)) {
                    System.out.println("Expence Hari");
                    if (allExpence.getExpence_typeId() != 0) {
                        expenceType = expenceTypeController.searchExpencesType(allExpence.getExpence_typeId()).getExpencesType_name();
                    }
                    if (allExpence.getExpence_subTypeId() != 0) {
                        exSubType = expenceSubTypeController.searchExpencesSubType(allExpence.getExpence_subTypeId()).getExpencesSubTytpe_name();
                    }
                    if (allExpence.getExpence_paymentModeId() != 0) {
                        payMode = paymentModeController.searchPaymentMode(allExpence.getExpence_paymentModeId()).getPaymentMode_name();
                    }
                    if (allExpence.getExpence_enteredUser() != 0) {
                        for (M_Employee allLastAddedEmployee : allLastAddedEmployees) {
                            if (allExpence.getExpence_enteredUser() == allLastAddedEmployee.getEmp_id()) {
                                enteredEmp = allLastAddedEmployee.getEmp_initials() + " " + allLastAddedEmployee.getEmp_firstName();
                                break;
                            }
                        }

                    }
                    if (allExpence.getExpence_refSiteId() != 0) {
                        project = projectController.searchPrimaryProject(allExpence.getExpence_refSiteId()).getProject_primary_name();
                    }

                    Object[] rowData = {false, "EXPENCE", project, expenceType, exSubType, allExpence.getExpence_invoiceAmount(), allExpence.getExpence_description(), payMode, enteredEmp, allExpence.getExpence_invoiceNo()};
                    dtmApproval.addRow(rowData);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Income_Expences_Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void transferApproval() {
        try {
            int approvedEmp = 0;
            if (cmb_approved_emp.getSelectedIndex() != 0) {
                approvedEmp = Integer.parseInt(cmb_approved_emp.getSelectedItem().toString().split(" : ")[0]);
            }
            Date approvedDate = dp_approvedDate.getDate();
            boolean updated = true;
            Date accDate = dp_accountDate.getDate();
            for (int i = 0; i < dtmApproval.getRowCount(); i++) {

                if (dtmApproval.getValueAt(i, 1).toString().equalsIgnoreCase("EXPENCE")) {
                    int exTypeID = 0;
                    int exSubTypeId = 0;
                    int projectId = 0;
                    double amount = 0;
                    if (!"".equals(dtmApproval.getValueAt(i, 3).toString())) {
                        exTypeID = expenceTypeController.searchExpencesType(dtmApproval.getValueAt(i, 3).toString()).getExpencesType_id();
                    } else {
                        exTypeID = 0;
                    }
                    if (!"".equals(dtmApproval.getValueAt(i, 4).toString())) {
                        exSubTypeId = expenceSubTypeController.searchExpencesSubType(dtmApproval.getValueAt(i, 4).toString()).getExpencesSubTytpe_id();
                    } else {
                        exSubTypeId = 0;
                    }
                    if (!"".equals(dtmApproval.getValueAt(i, 2).toString())) {
                        projectId = projectController.searchPrimaryProjectByName(dtmApproval.getValueAt(i, 2).toString()).getProject_id();
                    } else {
                        projectId = 0;
                    }
                    if (!"".equals(dtmApproval.getValueAt(i, 5).toString())) {
                        amount = Double.parseDouble(dtmApproval.getValueAt(i, 5).toString());
                    } else {
                        amount = 0;
                    }
                    T_Expences searchExpence = expencesController.searchExpence(accDate, exTypeID, exSubTypeId, projectId, amount);

                    boolean status = (boolean) dtmApproval.getValueAt(i, 0);
                    if (status) {
                        searchExpence.setExpence_status("APPROVED");
                        searchExpence.setExpence_approvedDate(approvedDate);
                        searchExpence.setExpence_approvedUser(approvedEmp);

                    } else {
                        searchExpence.setExpence_status("PENDING");
                    }
                    if (updated) {
                        boolean updateExpence = expencesController.updateExpence(searchExpence);
                        if (updateExpence) {
                            updated = true;
                        } else {
                            updated = false;
                        }
                    }

                } else {
                    int inTypeId = 0;
                    int inSubTypeId = 0;
                    int projectId = 0;
                    double value = 0;
                    if (!"".equals(dtmApproval.getValueAt(i, 3).toString())) {
                        inTypeId = incomeTypeControler.searchIncomeType(dtmApproval.getValueAt(i, 3).toString()).getIncomeType_id();
                    } else {
                        inTypeId = 0;
                    }
                    if (!"".equals(dtmApproval.getValueAt(i, 4).toString())) {
                        inSubTypeId = incomeSubTypeController.searchIncomeSubType(dtmApproval.getValueAt(i, 4).toString()).getIncomeSubType_id();
                    } else {
                        inSubTypeId = 0;
                    }
                    if (!"".equals(dtmApproval.getValueAt(i, 2).toString())) {
                        projectId = projectController.searchPrimaryProjectByName(dtmApproval.getValueAt(i, 2).toString()).getProject_id();
                    } else {
                        projectId = 0;
                    }
                    if (!"".equals(dtmApproval.getValueAt(i, 5).toString())) {
                        value = Double.parseDouble(dtmApproval.getValueAt(i, 5).toString());
                    } else {
                        value = 0;
                    }
                    T_Income searchIncome = incomeController.searchIncome(accDate, inTypeId, inSubTypeId, projectId, value);
                    if ((boolean) dtmApproval.getValueAt(i, 0) == true) {
                        searchIncome.setIncome_status("APPROVED");
                        searchIncome.setIncome_approvedDate(approvedDate);
                        searchIncome.setIncome_approvedUser(approvedEmp);
                    } else {
                        searchIncome.setIncome_status("PENDING");
                    }
                    if (updated) {
                        boolean updateIncome = incomeController.updateIncome(searchIncome);
                        if (updateIncome) {
                            updated = true;
                        } else {
                            updated = false;
                        }
                    }
                }
            }

            if (updated) {
                JOptionPane.showMessageDialog(this, "Approval Transfered Successfully..");
                clearFields();
                New_Expences_Panel.setVisible(false);
                Expences_View_Panel.setVisible(true);
                loadPendinIEDetails();
            } else {
                JOptionPane.showMessageDialog(this, "Something Went Wrong.. Please Check Again..");
            }

        } catch (Exception ex) {
            Logger.getLogger(Income_Expences_Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearFields() {
        dp_accountDate.setDate(null);
        dp_approvedDate.setDate(null);
        cmb_approved_emp.setSelectedIndex(0);
    }

    private void loadEmpCombo() {
        cmb_approved_emp.removeAll();
        try {
            List<M_Employee> allLastAddedEmployees = employeeController.getAllLastAddedEmployees();
            for (M_Employee allLastAddedEmployee : allLastAddedEmployees) {
                if (allLastAddedEmployee.getEmp_jobType_id() == 1) {
                    cmb_approved_emp.addItem(allLastAddedEmployee.getEmp_id()+" : "+allLastAddedEmployee.getEmp_initials()+" "+allLastAddedEmployee.getEmp_firstName()+" "+allLastAddedEmployee.getEmp_middleName());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Income_Expences_Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
