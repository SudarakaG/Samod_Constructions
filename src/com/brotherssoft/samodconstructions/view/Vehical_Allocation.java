/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.brotherssoft.samodconstructions.view;

import com.brotherssoft.samodconstructions.controller.M_EmployeeController;
import com.brotherssoft.samodconstructions.controller.M_MainStockController;
import com.brotherssoft.samodconstructions.controller.M_Project_PrimaryController;
import com.brotherssoft.samodconstructions.controller.M_VehicleController;
import com.brotherssoft.samodconstructions.controller.T_SiteAllocationController;
import com.brotherssoft.samodconstructions.custom.IDGenerator;
import com.brotherssoft.samodconstructions.model.M_Employee;
import com.brotherssoft.samodconstructions.model.M_MainStock;
import com.brotherssoft.samodconstructions.model.M_Project_Primary;
import com.brotherssoft.samodconstructions.model.M_Vehicle;
import com.brotherssoft.samodconstructions.model.T_SiteAllocation;
import com.brotherssoft.samodconstructions.serverconnector.ServerConnector;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akvasoft
 */
public class Vehical_Allocation extends javax.swing.JPanel {

    M_MainStockController mainStockController;
    T_SiteAllocationController siteAllocationController;
    M_VehicleController vehicleController;
    M_Project_PrimaryController projectController;
    M_EmployeeController employeeController;
    DefaultTableModel dtmVehiAllo;

    DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
    M_MainStock mainStockGlobal = null;
    T_SiteAllocation siteAllocationGlobal = null;

    /**
     * Creates new form Vehical_Allocation
     */
    public Vehical_Allocation() throws Exception {
        initComponents();
        lbl_site.setVisible(false);
        cmb_allocated_site.setVisible(false);

        mainStockController = ServerConnector.getServerConnetor().getMainStockController();
        siteAllocationController = ServerConnector.getServerConnetor().getSiteAllocationController();
        vehicleController = ServerConnector.getServerConnetor().getVehicleController();
        projectController = ServerConnector.getServerConnetor().getPrimary_ProjectController();
        employeeController = ServerConnector.getServerConnetor().getEmployeeController();
        dtmVehiAllo = (DefaultTableModel) tbl_vehical_table.getModel();

        loadVehicleCombo();
        loadEmpCombo();
        loadVehicleAllocationTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Project_Primary_Info_Panel2 = new javax.swing.JPanel();
        user_panel_hedding4 = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jSeparator16 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tbl_vehical_table = new javax.swing.JTable();
        txt_search_name_ = new javax.swing.JTextField();
        txt_Input_Panel_Branch4 = new javax.swing.JPanel();
        jLabel112 = new javax.swing.JLabel();
        cmb_vehical = new javax.swing.JComboBox<>();
        btn_to_secondary_project = new javax.swing.JButton();
        btn_add_vehicle_allocation = new javax.swing.JButton();
        jLabel133 = new javax.swing.JLabel();
        dp_updated_date = new org.jdesktop.swingx.JXDatePicker();
        btn_new_primary_project = new javax.swing.JButton();
        jLabel113 = new javax.swing.JLabel();
        cmb_stock_type = new javax.swing.JComboBox<>();
        jLabel115 = new javax.swing.JLabel();
        cmb_transaction_type = new javax.swing.JComboBox<>();
        jLabel106 = new javax.swing.JLabel();
        lbl_site = new javax.swing.JLabel();
        cmb_allocated_site = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_comment = new javax.swing.JTextArea();
        jLabel116 = new javax.swing.JLabel();
        cmb_added_emp = new javax.swing.JComboBox<>();
        jLabel117 = new javax.swing.JLabel();
        cmb_approved_emp = new javax.swing.JComboBox<>();

        Project_Primary_Info_Panel2.setBackground(new java.awt.Color(255, 255, 255));
        Project_Primary_Info_Panel2.setPreferredSize(new java.awt.Dimension(1050, 710));

        user_panel_hedding4.setBackground(new java.awt.Color(122, 72, 222));

        jLabel68.setBackground(new java.awt.Color(255, 255, 255));
        jLabel68.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(204, 204, 255));
        jLabel68.setText("Administrations / System Management / Operations /");

        jLabel71.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(204, 204, 204));
        jLabel71.setText("Vehical Allocation");

        javax.swing.GroupLayout user_panel_hedding4Layout = new javax.swing.GroupLayout(user_panel_hedding4);
        user_panel_hedding4.setLayout(user_panel_hedding4Layout);
        user_panel_hedding4Layout.setHorizontalGroup(
            user_panel_hedding4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(user_panel_hedding4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(511, Short.MAX_VALUE))
            .addGroup(user_panel_hedding4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel71)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator16))
        );
        user_panel_hedding4Layout.setVerticalGroup(
            user_panel_hedding4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(user_panel_hedding4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(user_panel_hedding4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel71)
                    .addComponent(jSeparator16, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehical Allocation Infomation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jScrollPane14.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tbl_vehical_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vehicle", "Availability", "Updated Date", "Allocated Site"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_vehical_table.setGridColor(new java.awt.Color(255, 255, 255));
        tbl_vehical_table.setOpaque(false);
        tbl_vehical_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_vehical_tableMouseClicked(evt);
            }
        });
        jScrollPane14.setViewportView(tbl_vehical_table);

        txt_search_name_.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txt_search_name_.setForeground(new java.awt.Color(102, 102, 102));
        txt_search_name_.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_search_name_.setText("Search Vehical");
        txt_search_name_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_search_name_MouseClicked(evt);
            }
        });
        txt_search_name_.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_search_name_KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(txt_search_name_)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_search_name_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        txt_Input_Panel_Branch4.setBackground(new java.awt.Color(255, 255, 255));
        txt_Input_Panel_Branch4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehical Allocation Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        jLabel112.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel112.setText("Vehical");

        cmb_vehical.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_vehical.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Vehical -" }));
        cmb_vehical.setPreferredSize(new java.awt.Dimension(350, 26));
        cmb_vehical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_vehicalActionPerformed(evt);
            }
        });

        btn_to_secondary_project.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_to_secondary_project.setText("Back To Main");
        btn_to_secondary_project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_to_secondary_projectActionPerformed(evt);
            }
        });

        btn_add_vehicle_allocation.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_add_vehicle_allocation.setText("Save");
        btn_add_vehicle_allocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_vehicle_allocationActionPerformed(evt);
            }
        });

        jLabel133.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel133.setText("Date");

        dp_updated_date.setPreferredSize(new java.awt.Dimension(350, 26));
        dp_updated_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dp_updated_dateActionPerformed(evt);
            }
        });

        btn_new_primary_project.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_new_primary_project.setText("New");
        btn_new_primary_project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_new_primary_projectActionPerformed(evt);
            }
        });

        jLabel113.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel113.setText("Stock Type");

        cmb_stock_type.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cmb_stock_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Main Stock", "Site Allocation" }));
        cmb_stock_type.setPreferredSize(new java.awt.Dimension(350, 26));
        cmb_stock_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_stock_typeActionPerformed(evt);
            }
        });

        jLabel115.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel115.setText("Transaction Type");

        cmb_transaction_type.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cmb_transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALLOCATE", "DEALLOCATE", "DISPOSE" }));
        cmb_transaction_type.setPreferredSize(new java.awt.Dimension(350, 26));
        cmb_transaction_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_transaction_typeActionPerformed(evt);
            }
        });

        jLabel106.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel106.setText("Comment");

        lbl_site.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lbl_site.setText("Allocated Site");

        cmb_allocated_site.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_allocated_site.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Allocated Site -" }));
        cmb_allocated_site.setPreferredSize(new java.awt.Dimension(350, 26));
        cmb_allocated_site.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_allocated_siteActionPerformed(evt);
            }
        });

        txt_comment.setRows(10);
        jScrollPane1.setViewportView(txt_comment);

        jLabel116.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel116.setText("Added By");

        cmb_added_emp.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_added_emp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Allocated Employee -" }));
        cmb_added_emp.setPreferredSize(new java.awt.Dimension(350, 26));
        cmb_added_emp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_added_empActionPerformed(evt);
            }
        });

        jLabel117.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel117.setText("Approved By");

        cmb_approved_emp.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_approved_emp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select Approved Employee -" }));
        cmb_approved_emp.setPreferredSize(new java.awt.Dimension(350, 26));
        cmb_approved_emp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_approved_empActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout txt_Input_Panel_Branch4Layout = new javax.swing.GroupLayout(txt_Input_Panel_Branch4);
        txt_Input_Panel_Branch4.setLayout(txt_Input_Panel_Branch4Layout);
        txt_Input_Panel_Branch4Layout.setHorizontalGroup(
            txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_new_primary_project, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_add_vehicle_allocation, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_to_secondary_project))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                        .addComponent(jLabel115)
                        .addGap(11, 11, 11)
                        .addComponent(cmb_transaction_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                        .addComponent(jLabel113, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(cmb_stock_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                        .addComponent(jLabel112)
                        .addGap(75, 75, 75)
                        .addComponent(cmb_vehical, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                        .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel133, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel106, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel116))
                        .addGap(46, 46, 46)
                        .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmb_added_emp, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dp_updated_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                        .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                                .addComponent(jLabel117)
                                .addGap(38, 38, 38)
                                .addComponent(cmb_approved_emp, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, txt_Input_Panel_Branch4Layout.createSequentialGroup()
                                .addComponent(lbl_site)
                                .addGap(33, 33, 33)
                                .addComponent(cmb_allocated_site, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(71, 71, 71))
        );
        txt_Input_Panel_Branch4Layout.setVerticalGroup(
            txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txt_Input_Panel_Branch4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel113, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_stock_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_site, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_allocated_site, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel112, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_vehical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel115, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel133, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dp_updated_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel106, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel116, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_added_emp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel117, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_approved_emp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_add_vehicle_allocation)
                    .addGroup(txt_Input_Panel_Branch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_to_secondary_project, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_new_primary_project, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout Project_Primary_Info_Panel2Layout = new javax.swing.GroupLayout(Project_Primary_Info_Panel2);
        Project_Primary_Info_Panel2.setLayout(Project_Primary_Info_Panel2Layout);
        Project_Primary_Info_Panel2Layout.setHorizontalGroup(
            Project_Primary_Info_Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Project_Primary_Info_Panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_Input_Panel_Branch4, javax.swing.GroupLayout.PREFERRED_SIZE, 503, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(user_panel_hedding4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        Project_Primary_Info_Panel2Layout.setVerticalGroup(
            Project_Primary_Info_Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Project_Primary_Info_Panel2Layout.createSequentialGroup()
                .addComponent(user_panel_hedding4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Project_Primary_Info_Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_Input_Panel_Branch4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Project_Primary_Info_Panel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Project_Primary_Info_Panel2, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_vehical_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_vehical_tableMouseClicked
        clearFields();
        btn_add_vehicle_allocation.setEnabled(true);
        btn_add_vehicle_allocation.setText("Update");
        searchFromTableName();
        loadFieldsFromTable();
    }//GEN-LAST:event_tbl_vehical_tableMouseClicked

    private void txt_search_name_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_search_name_MouseClicked

    }//GEN-LAST:event_txt_search_name_MouseClicked

    private void txt_search_name_KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_search_name_KeyReleased

    }//GEN-LAST:event_txt_search_name_KeyReleased

    private void cmb_vehicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_vehicalActionPerformed
        cmb_vehical.getUI().setPopupVisible(cmb_vehical, false);
        checkAllocation();
        cmb_transaction_type.requestFocus();
    }//GEN-LAST:event_cmb_vehicalActionPerformed

    private void btn_to_secondary_projectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_to_secondary_projectActionPerformed

    }//GEN-LAST:event_btn_to_secondary_projectActionPerformed

    private void btn_add_vehicle_allocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_vehicle_allocationActionPerformed
        if (btn_add_vehicle_allocation.getText().equalsIgnoreCase("Save")) {
            saveVehicleAllocation();
        } else {
            updateVehicleAllocation();
        }
        loadVehicleAllocationTable();
    }//GEN-LAST:event_btn_add_vehicle_allocationActionPerformed

    private void dp_updated_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dp_updated_dateActionPerformed
        txt_comment.requestFocus();
    }//GEN-LAST:event_dp_updated_dateActionPerformed

    private void btn_new_primary_projectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_new_primary_projectActionPerformed
        clearFields();
    }//GEN-LAST:event_btn_new_primary_projectActionPerformed

    private void cmb_stock_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_stock_typeActionPerformed
        if (cmb_stock_type.getSelectedIndex() == 1) {
            lbl_site.setVisible(true);
            cmb_allocated_site.setVisible(true);
            loadSiteCombo();
            cmb_allocated_site.requestFocus();
        } else {
            lbl_site.setVisible(false);
            cmb_allocated_site.setVisible(false);
            cmb_vehical.requestFocus();
        }
        for (int i = 1; i < cmb_vehical.getItemCount(); i++) {
            cmb_vehical.removeItemAt(i);
        }
        loadVehicleCombo();
        loadVehicleAllocationTable();
    }//GEN-LAST:event_cmb_stock_typeActionPerformed

    private void cmb_transaction_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_transaction_typeActionPerformed
        dp_updated_date.requestFocus();
    }//GEN-LAST:event_cmb_transaction_typeActionPerformed

    private void cmb_allocated_siteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_allocated_siteActionPerformed
        cmb_allocated_site.getUI().setPopupVisible(cmb_allocated_site, false);
        checkAllocation();
        cmb_vehical.requestFocus();
    }//GEN-LAST:event_cmb_allocated_siteActionPerformed

    private void cmb_added_empActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_added_empActionPerformed
        cmb_approved_emp.requestFocus();
    }//GEN-LAST:event_cmb_added_empActionPerformed

    private void cmb_approved_empActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_approved_empActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_approved_empActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Project_Primary_Info_Panel2;
    private javax.swing.JButton btn_add_vehicle_allocation;
    private javax.swing.JButton btn_new_primary_project;
    private javax.swing.JButton btn_to_secondary_project;
    private javax.swing.JComboBox<String> cmb_added_emp;
    private javax.swing.JComboBox<String> cmb_allocated_site;
    private javax.swing.JComboBox<String> cmb_approved_emp;
    private javax.swing.JComboBox<String> cmb_stock_type;
    private javax.swing.JComboBox<String> cmb_transaction_type;
    private javax.swing.JComboBox<String> cmb_vehical;
    private org.jdesktop.swingx.JXDatePicker dp_updated_date;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel133;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JLabel lbl_site;
    private javax.swing.JTable tbl_vehical_table;
    private javax.swing.JPanel txt_Input_Panel_Branch4;
    private javax.swing.JTextArea txt_comment;
    private javax.swing.JTextField txt_search_name_;
    private javax.swing.JPanel user_panel_hedding4;
    // End of variables declaration//GEN-END:variables

    private void loadVehicleCombo() {
        cmb_vehical.removeAll();
        for (int i = 1; i < cmb_vehical.getItemCount(); i++) {
            cmb_vehical.removeItemAt(i);
        }
        try {
            List<M_Vehicle> allVehicles = vehicleController.getAllVehicles();
            if (cmb_stock_type.getSelectedIndex() == 0) {
                for (M_Vehicle allVehicle : allVehicles) {
                    cmb_vehical.addItem(allVehicle.getVehicle_regNo());
                }
            } else {
                for (int i = 1; i < cmb_vehical.getItemCount(); i++) {
                    cmb_vehical.removeItemAt(i);
                }
                List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                if (!allLastAddedMainStock.isEmpty()) {
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        for (M_Vehicle allVehicle : allVehicles) {
                            if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(allVehicle.getVehicle_id())) {
                                cmb_vehical.addItem(allVehicle.getVehicle_regNo());
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "There isn't Any Item in Main Stock.");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadEmpCombo() {
        cmb_added_emp.removeAll();
        cmb_approved_emp.removeAll();
        try {
            List<M_Employee> allEmployees = employeeController.getAllEmployees();
            for (M_Employee allEmployee : allEmployees) {
                if (allEmployee.getEmp_jobType_id() == 1) {
                    cmb_added_emp.addItem(allEmployee.getEmp_id() + " : " + allEmployee.getEmp_firstName() + " " + allEmployee.getEmp_middleName() + " " + allEmployee.getEmp_surName());
                    cmb_approved_emp.addItem(allEmployee.getEmp_id() + " : " + allEmployee.getEmp_firstName() + " " + allEmployee.getEmp_middleName() + " " + allEmployee.getEmp_surName());
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadSiteCombo() {
        cmb_allocated_site.removeAll();
        try {
            List<M_Project_Primary> allPrimaryProjects = projectController.getAllPrimaryProjects();
            for (M_Project_Primary allPrimaryProject : allPrimaryProjects) {
                cmb_allocated_site.addItem(allPrimaryProject.getProject_primary_name());
            }
        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveVehicleAllocation() {
        try {

            String vehicleId = vehicleController.searchVehicleByNumber(cmb_vehical.getSelectedItem().toString()).getVehicle_id();
            String trType = cmb_transaction_type.getSelectedItem().toString();
            Date updatedDate = dp_updated_date.getDate();
            String comment = txt_comment.getText();
            int addeEmp = 0;
            if (cmb_added_emp.getSelectedIndex() != 0) {
                addeEmp = Integer.parseInt(cmb_added_emp.getSelectedItem().toString().split(" : ")[0]);
            }
            int approvedEmp = 0;
            if (cmb_approved_emp.getSelectedIndex() != 0) {
                approvedEmp = Integer.parseInt(cmb_approved_emp.getSelectedItem().toString().split(" : ")[0]);
            }
            int qty = 0;
            if (cmb_transaction_type.getSelectedIndex() == 0) {
                qty = 1;
            }

            if (cmb_stock_type.getSelectedIndex() == 0) {
                int mainStockId = IDGenerator.getNewID("m_mstock", "MSTOCK_ID");
                M_MainStock mainStock = new M_MainStock(mainStockId, 0, vehicleId, "VEHICLE", updatedDate, addeEmp, qty, approvedEmp, comment, trType);
                boolean addMainStock = mainStockController.addMainStock(mainStock);
                if (addMainStock) {
                    JOptionPane.showMessageDialog(this, "Vehicle Added to Main Stock Successfully..");
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Adding Vehicle to Main Stock failed.. Please Check Again..");
                }
            } else {
                int siteAllocationId = IDGenerator.getNewID("t_sitealloc", "SITEALLOC_ID");
                int siteId = projectController.searchPrimaryProjectByName(cmb_allocated_site.getSelectedItem().toString()).getProject_id();
                T_SiteAllocation siteAllocation = new T_SiteAllocation(siteAllocationId, siteId, updatedDate, "VEHICLE", vehicleId, qty, comment, trType, addeEmp, approvedEmp);
                boolean addSiteAllocation = siteAllocationController.addSiteAllocation(siteAllocation);
                if (addSiteAllocation) {
                    List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(vehicleId)) {
                            m_MainStock.setMainStock_quantity(0);
                            boolean updateMainStock = mainStockController.updateMainStock(m_MainStock);
                            if (updateMainStock) {
                                JOptionPane.showMessageDialog(this, "Vehicle Allocated to Site Successfully..");
                                clearFields();
                                break;
                            } else {
                                JOptionPane.showMessageDialog(this, "Allocating Vehicle Failed.. Plaease Check Again..");
                            }
                        }
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void updateVehicleAllocation() {
        try {

            String vehicleId = vehicleController.searchVehicleByNumber(cmb_vehical.getSelectedItem().toString()).getVehicle_id();
            String trType = cmb_transaction_type.getSelectedItem().toString();
            Date updatedDate = dp_updated_date.getDate();
            String comment = txt_comment.getText();
            int addeEmp = 0;
            if (cmb_added_emp.getSelectedIndex() != 0) {
                addeEmp = Integer.parseInt(cmb_added_emp.getSelectedItem().toString().split(" : ")[0]);
            }
            int approvedEmp = 0;
            if (cmb_approved_emp.getSelectedIndex() != 0) {
                approvedEmp = Integer.parseInt(cmb_approved_emp.getSelectedItem().toString().split(" : ")[0]);
            }
            int qty = 0;
            if (cmb_transaction_type.getSelectedIndex() == 0) {
                qty = 1;
            }

            if (cmb_stock_type.getSelectedIndex() == 0) {
                int mainStockId = mainStockGlobal.getMainStock_id();
                M_MainStock mainStock = new M_MainStock(mainStockId, 0, vehicleId, "VEHICLE", updatedDate, addeEmp, qty, approvedEmp, comment, trType);
                boolean updateMainStock = mainStockController.updateMainStock(mainStock);
                if (updateMainStock) {
                    JOptionPane.showMessageDialog(this, "Vehicle Details Updated in Main Stock Successfully..");
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Updating Vehicle Details in Main Stock failed.. Please Check Again..");
                }
            } else {
                int siteAllocationId = siteAllocationGlobal.getSiteAllocation_id();
                int siteId = projectController.searchPrimaryProjectByName(cmb_allocated_site.getSelectedItem().toString()).getProject_id();
                T_SiteAllocation siteAllocation = new T_SiteAllocation(siteAllocationId, siteId, updatedDate, "VEHICLE", vehicleId, qty, comment, trType, addeEmp, approvedEmp);
                boolean updateSiteAllocation = siteAllocationController.updateSiteAllocation(siteAllocation);
                if (updateSiteAllocation) {
                    List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(vehicleId)) {
                            m_MainStock.setMainStock_quantity(0);
                            boolean updateMainStock = mainStockController.updateMainStock(m_MainStock);
                            if (updateMainStock) {
                                JOptionPane.showMessageDialog(this, "Vehicle Details Updated in Site Successfully..");
                                clearFields();
                                break;
                            } else {
                                JOptionPane.showMessageDialog(this, "Updating Vehicle Details in Site Failed.. Plaease Check Again..");
                            }
                        }
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearFields() {
        cmb_allocated_site.setSelectedIndex(0);
        cmb_vehical.setSelectedIndex(0);
        cmb_transaction_type.setSelectedIndex(0);
        dp_updated_date.setDate(null);
        txt_comment.setText("");
        cmb_added_emp.setSelectedIndex(0);
        cmb_approved_emp.setSelectedIndex(0);
        btn_add_vehicle_allocation.setText("Save");
        cmb_stock_type.setEnabled(true);
        cmb_allocated_site.setEnabled(true);
        cmb_vehical.setEnabled(true);
        cmb_stock_type.requestFocus();
    }

    private void loadVehicleAllocationTable() {
        clearFields();
        dtmVehiAllo.setRowCount(0);
        String upDate = "";
        String availability = "";
        try {

            List<M_Vehicle> allVehicles = vehicleController.getAllVehicles();
            if (cmb_stock_type.getSelectedIndex() == 0) {
                List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                for (M_MainStock m_MainStock : allLastAddedMainStock) {
                    if (m_MainStock.getMainStock_updateDate() != null) {
                        upDate = m_MainStock.getMainStock_updateDate().toString();
                    }
                    if (m_MainStock.getMainStock_quantity() == 1) {
                        availability = "Available";
                    } else {
                        availability = "Not Available";
                    }
                    for (M_Vehicle allVehicle : allVehicles) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(allVehicle.getVehicle_id())) {
                            String[] rowData = {allVehicle.getVehicle_regNo(), availability, upDate};
                            dtmVehiAllo.addRow(rowData);
                        }
                    }
                }
            } else {
                List<T_SiteAllocation> lastAddedSiteAllocations = siteAllocationController.getLastAddedSiteAllocations();
                for (T_SiteAllocation lastAddedSiteAllocation : lastAddedSiteAllocations) {
                    if (lastAddedSiteAllocation.getSiteAllocation_date() != null) {
                        upDate = lastAddedSiteAllocation.getSiteAllocation_date().toString();
                    }
                    if (lastAddedSiteAllocation.getSiteAllocation_quantity() == 1) {
                        availability = "Available";
                    } else {
                        availability = "Not Available";
                    }
                    for (M_Vehicle allVehicle : allVehicles) {
                        if (lastAddedSiteAllocation.getSiteAllocation_itemId().equalsIgnoreCase(allVehicle.getVehicle_id())) {
                            String[] rowData = {allVehicle.getVehicle_regNo(), availability, upDate, projectController.searchPrimaryProject(lastAddedSiteAllocation.getSiteAllocation_siteId()).getProject_primary_name()};
                            dtmVehiAllo.addRow(rowData);
                        }
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadFieldsFromTable() {
        cmb_stock_type.setEnabled(false);
        cmb_allocated_site.setEnabled(false);
        cmb_vehical.setEnabled(false);
        try {
            if (cmb_stock_type.getSelectedIndex() == 0) {
                //cmb_stock_type.setSelectedIndex(0);

                cmb_transaction_type.setSelectedItem(mainStockGlobal.getMainStock_TRType());
                dp_updated_date.setDate(mainStockGlobal.getMainStock_updateDate());
                txt_comment.setText(mainStockGlobal.getMainStock_description());
                for (int i = 1; i < cmb_added_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_added_emp.getItemAt(i).toString().split(" : ")[0]) == mainStockGlobal.getMainStock_addeduser_id()) {
                        cmb_added_emp.setSelectedIndex(i);
                        break;
                    }
                }
                for (int i = 1; i < cmb_approved_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_approved_emp.getItemAt(i).toString().split(" : ")[0]) == mainStockGlobal.getMainStock_approveduser_id()) {
                        cmb_approved_emp.setSelectedIndex(i);
                        break;
                    }
                }
                cmb_vehical.setSelectedItem(vehicleController.searchVehicle(mainStockGlobal.getMainStock_equipment_id()).getVehicle_regNo());

            } else {
                //cmb_stock_type.setSelectedIndex(1);

                cmb_transaction_type.setSelectedItem(siteAllocationGlobal.getSiteAllocation_TRType());
                dp_updated_date.setDate(siteAllocationGlobal.getSiteAllocation_date());
                txt_comment.setText(siteAllocationGlobal.getSiteAllocation_comment());
                for (int i = 1; i < cmb_added_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_added_emp.getItemAt(i).toString().split(" : ")[0]) == siteAllocationGlobal.getSiteAllocation_addedUser()) {
                        cmb_added_emp.setSelectedIndex(i);
                        break;
                    }
                }
                for (int i = 1; i < cmb_approved_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_approved_emp.getItemAt(i).toString().split(" : ")[0]) == siteAllocationGlobal.getSiteAllocation_authorizedUser()) {
                        cmb_approved_emp.setSelectedIndex(i);
                        break;
                    }
                }
                cmb_allocated_site.setSelectedItem(projectController.searchPrimaryProject(siteAllocationGlobal.getSiteAllocation_siteId()).getProject_primary_name());
                cmb_vehical.setSelectedItem(vehicleController.searchVehicle(siteAllocationGlobal.getSiteAllocation_itemId()).getVehicle_regNo());
            }
        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchFromTableName() {
        int selectedRow = tbl_vehical_table.getSelectedRow();
        try {

            String vehicleId = vehicleController.searchVehicleByNumber(dtmVehiAllo.getValueAt(selectedRow, 0).toString()).getVehicle_id();
            if (cmb_stock_type.getSelectedIndex() == 0) {
                List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                for (M_MainStock m_MainStock : allLastAddedMainStock) {
                    if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(vehicleId)) {
                        mainStockGlobal = m_MainStock;
                        break;
                    }
                }
            } else {
                List<T_SiteAllocation> lastAddedSiteAllocations = siteAllocationController.getLastAddedSiteAllocations();
                for (T_SiteAllocation lastAddedSiteAllocation : lastAddedSiteAllocations) {
                    if (lastAddedSiteAllocation.getSiteAllocation_itemId().equalsIgnoreCase(vehicleId)) {
                        siteAllocationGlobal = lastAddedSiteAllocation;
                        break;
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void checkAllocation() {
        if (cmb_vehical.getSelectedIndex() != 0 && btn_add_vehicle_allocation.getText().equalsIgnoreCase("Save")) {
            try {
                String vehicleId = vehicleController.searchVehicleByNumber(cmb_vehical.getSelectedItem().toString()).getVehicle_id();
                if (cmb_stock_type.getSelectedIndex() == 0) {
                    List<M_MainStock> allLastAddedMainStock = mainStockController.getAllLastAddedMainStock();
                    for (M_MainStock m_MainStock : allLastAddedMainStock) {
                        if (m_MainStock.getMainStock_equipment_id().equalsIgnoreCase(vehicleId)) {
                            mainStockGlobal = m_MainStock;
                            loadAllocationFields();
                            JOptionPane.showMessageDialog(this, "Vehicle " + cmb_vehical.getSelectedItem().toString() + " Already in the Main Stock.");
                            break;
                        } else {
                            dp_updated_date.setDate(null);
                            txt_comment.setText("");
                            cmb_added_emp.setSelectedIndex(0);
                            cmb_approved_emp.setSelectedIndex(0);
                            btn_add_vehicle_allocation.setText("Save");
                            btn_add_vehicle_allocation.setEnabled(true);
                        }
                    }
                } else {
                    if (cmb_allocated_site.getSelectedIndex() != 0 && cmb_vehical.getSelectedIndex() != 0) {
                        List<T_SiteAllocation> lastAddedSiteAllocations = siteAllocationController.getLastAddedSiteAllocations();
                        for (T_SiteAllocation lastAddedSiteAllocation : lastAddedSiteAllocations) {
                            if (lastAddedSiteAllocation.getSiteAllocation_itemId().equalsIgnoreCase(vehicleId)) {
                                siteAllocationGlobal = lastAddedSiteAllocation;
                                loadAllocationFields();
                                JOptionPane.showMessageDialog(this, "Vehicle " + cmb_vehical.getSelectedItem().toString() + " Already allocated to Site " + projectController.searchPrimaryProject(lastAddedSiteAllocation.getSiteAllocation_siteId()).getProject_primary_name() + ".");
                                break;
                            } else {
                                dp_updated_date.setDate(null);
                                txt_comment.setText("");
                                cmb_added_emp.setSelectedIndex(0);
                                cmb_approved_emp.setSelectedIndex(0);
                                btn_add_vehicle_allocation.setText("Save");
                                btn_add_vehicle_allocation.setEnabled(true);
                            }
                        }
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void loadAllocationFields() {
        btn_add_vehicle_allocation.setEnabled(false);
        try {
            if (cmb_stock_type.getSelectedIndex() == 0) {
                dp_updated_date.setDate(mainStockGlobal.getMainStock_updateDate());
                txt_comment.setText(mainStockGlobal.getMainStock_description());
                for (int i = 1; i < cmb_added_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_added_emp.getItemAt(i).toString().split(" : ")[0]) == mainStockGlobal.getMainStock_addeduser_id()) {
                        cmb_added_emp.setSelectedIndex(i);
                        break;
                    }
                }
                for (int i = 1; i < cmb_approved_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_approved_emp.getItemAt(i).toString().split(" : ")[0]) == mainStockGlobal.getMainStock_approveduser_id()) {
                        cmb_approved_emp.setSelectedIndex(i);
                        break;
                    }
                }
            } else {
                dp_updated_date.setDate(siteAllocationGlobal.getSiteAllocation_date());
                txt_comment.setText(siteAllocationGlobal.getSiteAllocation_comment());
                for (int i = 1; i < cmb_added_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_added_emp.getItemAt(i).toString().split(" : ")[0]) == siteAllocationGlobal.getSiteAllocation_addedUser()) {
                        cmb_added_emp.setSelectedIndex(i);
                        break;
                    }
                }
                for (int i = 1; i < cmb_approved_emp.getItemCount(); i++) {
                    if (Integer.parseInt(cmb_approved_emp.getItemAt(i).toString().split(" : ")[0]) == siteAllocationGlobal.getSiteAllocation_authorizedUser()) {
                        cmb_approved_emp.setSelectedIndex(i);
                        break;
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Vehical_Allocation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
